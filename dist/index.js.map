{"version":3,"file":"index.js","sources":["../src/useActiveWalletIds.js","../src/useArchivedWalletIds.js","../src/useDeletedWalletIds.js","../src/useFiatCurrencyCode.js","../src/useLocalStorage.js","../src/useLocalUsers.js","../src/useOtpKey.js","../src/useOtpResetDate.js","../src/useSyncedStorage.js"],"sourcesContent":["// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useActiveWalletIds = (account: EdgeAccount | null | void) => {\n  const [activeWalletIds, setActiveWalletIds] = useState(account ? account.archivedWalletIds : [])\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setActiveWalletIds(account.activeWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('activeWalletIds', setActiveWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return activeWalletIds\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useArchivedWalletIds = (account: EdgeAccount | null | void) => {\n  const [archivedWalletIds, setArchivedWalletIds] = useState(account ? account.activeWalletIds : [])\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setArchivedWalletIds(account.archivedWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('archivedWalletIds', setArchivedWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return archivedWalletIds\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeWalletInfoFull } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nconst getDeletedWalletIds = (walletInfos: Array<EdgeWalletInfoFull>) => {\n  const deletedWalletInfos: Array<EdgeWalletInfoFull> = walletInfos.filter(key => key.deleted)\n  const deletedWalletIds: Array<string> = deletedWalletInfos.map((key: EdgeWalletInfoFull) => key.id)\n\n  return deletedWalletIds\n}\n\nexport const useDeletedWalletIds = (account: EdgeAccount | null | void) => {\n  const initialState = account ? getDeletedWalletIds(account.allKeys) : []\n  const [deletedWalletIds, setDeletedWalletIds] = useState(initialState)\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setDeletedWalletIds(getDeletedWalletIds(account.allKeys)) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('allKeys', allKeys => {\n      setDeletedWalletIds(getDeletedWalletIds(allKeys))\n    }) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return deletedWalletIds\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype WRITE_FIAT_CURRENCY_CODE_START = {|\n  type: 'WRITE_FIAT_CURRENCY_CODE_START'\n|}\ntype WRITE_FIAT_CURRENCY_CODE_SUCCESS = {|\n  fiatCurrencyCode: string,\n  type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS'\n|}\ntype WRITE_FIAT_CURRENCY_CODE_ERROR = {|\n  error: Error,\n  type: 'WRITE_FIAT_CURRENCY_CODE_ERROR'\n|}\ntype READ_FIAT_CURRENCY_CODE_SUCCESS = {|\n  fiatCurrencyCode: string,\n  type: 'READ_FIAT_CURRENCY_CODE_SUCCESS'\n|}\ntype Action =\n  | WRITE_FIAT_CURRENCY_CODE_START\n  | WRITE_FIAT_CURRENCY_CODE_SUCCESS\n  | WRITE_FIAT_CURRENCY_CODE_ERROR\n  | READ_FIAT_CURRENCY_CODE_SUCCESS\n\ntype State = {\n  error: Error | null,\n  fiatCurrencyCode: string | null,\n  pending: boolean\n}\n\nconst initialState: State = {\n  fiatCurrencyCode: null,\n  pending: false,\n  error: null\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_FIAT_CURRENCY_CODE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_FIAT_CURRENCY_CODE_SUCCESS':\n    case 'WRITE_FIAT_CURRENCY_CODE_SUCCESS': {\n      const { fiatCurrencyCode } = action\n      return { ...state, pending: false, fiatCurrencyCode }\n    }\n    case 'WRITE_FIAT_CURRENCY_CODE_ERROR': {\n      const { error } = action\n      return { ...state, pending: false, error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useFiatCurrencyCode = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const onSuccess = (fiatCurrencyCode: string) => () =>\n    dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS', fiatCurrencyCode })\n  const onError = (error: Error) => dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_ERROR', error })\n\n  const setFiatCurrencyCode = (fiatCurrencyCode: string) => {\n    if (!wallet) return\n    dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_START' })\n    wallet\n      .setFiatCurrencyCode(fiatCurrencyCode)\n      .then(onSuccess(fiatCurrencyCode))\n      .catch(onError)\n  }\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({\n      type: 'READ_FIAT_CURRENCY_CODE_SUCCESS',\n      fiatCurrencyCode: wallet.fiatCurrencyCode\n    })\n\n    const unsubscribe = wallet.watch(\n      // mount with wallet / null -> wallet / walletA -> walletB (2)\n      'fiatCurrencyCode',\n      (fiatCurrencyCode: $PropertyType<EdgeCurrencyWallet, 'fiatCurrencyCode'>) =>\n        dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS', fiatCurrencyCode })\n    )\n\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return { ...state, setFiatCurrencyCode }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WRITE_START = {| type: 'WRITE_START' |}\ntype WRITE_SUCCESS = {| data: Stringifyable, type: 'WRITE_SUCCESS' |}\ntype WRITE_ERROR = {| error: Error, type: 'WRITE_ERROR' |}\ntype READ_START = {| type: 'READ_START' |}\ntype READ_SUCCESS = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype READ_ERROR = {| error: Error, type: 'READ_ERROR' |}\ntype Action = WRITE_START | WRITE_SUCCESS | WRITE_ERROR | READ_START | READ_SUCCESS | READ_ERROR\n\ntype State = {\n  data: Stringifyable | null,\n  readError: Error | null,\n  readPending: boolean,\n  writeError: Error | null,\n  writePending: boolean\n}\n\nconst initialState: State = {\n  data: null,\n  writePending: false,\n  writeError: null,\n  readPending: false,\n  readError: null\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, writePending: true, writeError: null }\n    }\n    case 'WRITE_SUCCESS': {\n      const { data } = action\n      return { ...state, writePending: false, data }\n    }\n    case 'WRITE_ERROR': {\n      const { error: writeError } = action\n      return { ...state, writePending: false, writeError }\n    }\n    case 'READ_START': {\n      return { ...state, readPending: true, readError: null }\n    }\n    case 'READ_SUCCESS': {\n      const { data } = action\n      return { ...state, readPending: false, data }\n    }\n    case 'READ_ERROR': {\n      const { error: readError } = action\n      return { ...state, readPending: false, readError }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLocalStorage = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const onWriteSuccess = (data: Stringifyable) => () => dispatch({ type: 'WRITE_SUCCESS', data })\n  const onWriteError = (error: Error) => dispatch({ type: 'WRITE_ERROR', error })\n  const onReadSuccess = (data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) })\n  const onReadError = (error: Error) => dispatch({ type: 'READ_ERROR', error })\n\n  const setData = (data: Stringifyable) => {\n    if (!storageContext || !path) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.localDisklet\n      .setText(path, JSON.stringify(data))\n      .then(onWriteSuccess(data))\n      .catch(onWriteError)\n  }\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.localDisklet\n      .getText(path)\n      .then(onReadSuccess)\n      .catch(onReadError) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n\n    const unsubscribe = storageContext.watch(\n      'localDisklet',\n      (localDisklet: $PropertyType<EdgeAccount | EdgeCurrencyWallet, 'localDisklet'>) => {\n        if (!storageContext || !path) return\n        localDisklet\n          .getText(path)\n          .then(onReadSuccess)\n          .catch(onReadError)\n      }\n    )\n\n    return unsubscribe // unmount with storageContext / storageContextA -> storageContextB (1) / storageContext -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [storageContext]) // onUpdate\n\n  return { ...state, setData }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useLocalUsers = (context: EdgeContext | null | void) => {\n  const [localUsers, setLocalUsers] = useState(context ? context.localUsers : [])\n\n  const effect = () => {\n    if (!context) return // mount with null\n    const unsubscribe = context.watch('localUsers', setLocalUsers) // mount with context / null -> context / contextA -> contextB (2)\n    return unsubscribe // unmount with context / contextA -> contextB (1) / context -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [context]) // onUpdate\n\n  return localUsers\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useOtpKey = (account: EdgeAccount | null | void) => {\n  const [otpKey, setOtpKey] = useState(account ? account.otpKey : [])\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setOtpKey(account.otpKey) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('otpKey', setOtpKey) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return otpKey\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useOtpResetDate = (account: EdgeAccount | null | void) => {\n  const [otpResetDate, setOtpResetDate] = useState(account ? account.otpResetDate : [])\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setOtpResetDate(account.otpResetDate) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('otpResetDate', setOtpResetDate) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return otpResetDate\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WRITE_START = {| type: 'WRITE_START' |}\ntype WRITE_SUCCESS = {| data: Stringifyable, type: 'WRITE_SUCCESS' |}\ntype WRITE_ERROR = {| error: Error, type: 'WRITE_ERROR' |}\ntype READ_START = {| type: 'READ_START' |}\ntype READ_SUCCESS = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype READ_ERROR = {| error: Error, type: 'READ_ERROR' |}\ntype Action = WRITE_START | WRITE_SUCCESS | WRITE_ERROR | READ_START | READ_SUCCESS | READ_ERROR\n\ntype State = {\n  data: Stringifyable | null,\n  readError: Error | null,\n  readPending: boolean,\n  writeError: Error | null,\n  writePending: boolean\n}\n\nconst initialState: State = {\n  data: null,\n  writePending: false,\n  writeError: null,\n  readPending: false,\n  readError: null\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, writePending: true, writeError: null }\n    }\n    case 'WRITE_SUCCESS': {\n      const { data } = action\n      return { ...state, writePending: false, data }\n    }\n    case 'WRITE_ERROR': {\n      const { error: writeError } = action\n      return { ...state, writePending: false, writeError }\n    }\n    case 'READ_START': {\n      return { ...state, readPending: true, readError: null }\n    }\n    case 'READ_SUCCESS': {\n      const { data } = action\n      return { ...state, readPending: false, data }\n    }\n    case 'READ_ERROR': {\n      const { error: readError } = action\n      return { ...state, readPending: false, readError }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSyncedStorage = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const onWriteSuccess = (data: Stringifyable) => () => dispatch({ type: 'WRITE_SUCCESS', data })\n  const onWriteError = (error: Error) => dispatch({ type: 'WRITE_ERROR', error })\n  const onReadSuccess = (data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) })\n  const onReadError = (error: Error) => dispatch({ type: 'READ_ERROR', error })\n\n  const setData = (data: Stringifyable) => {\n    if (!storageContext || !path) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.disklet\n      .setText(path, JSON.stringify(data))\n      .then(onWriteSuccess(data))\n      .catch(onWriteError)\n  }\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.disklet\n      .getText(path)\n      .then(onReadSuccess)\n      .catch(onReadError) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n\n    const unsubscribe = storageContext.watch(\n      'disklet',\n      (disklet: $PropertyType<EdgeAccount | EdgeCurrencyWallet, 'disklet'>) => {\n        if (!storageContext || !path) return\n        disklet\n          .getText(path)\n          .then(onReadSuccess)\n          .catch(onReadError)\n      }\n    )\n\n    return unsubscribe // unmount with storageContext / storageContextA -> storageContextB (1) / storageContext -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [storageContext]) // onUpdate\n\n  return { ...state, setData }\n}\n"],"names":[],"mappings":";;;;;;;;;mCAK0C;;;;;;;;;;;;;;;;;;qCCAE;;;;;;;;;;;;;;;;;;wCCAJ;0BACd;wBACa,8BAA8B;;;;;oCAK1B;;;;;;;;;;;;;;;;;;;;;;;ACGzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPmE;;;;;;;;;;;;;;;;;sBAuBxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAwCN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BClEc;;;;;;;;;;;;;;;;;0BCAJ;;;;;;;;;;;;;;;;;;gCCAM;;;;;;;;;;;;;;;;;;;;;ACG8B;;;;;;;;;;;;;;;;;sBAuBxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAwCN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}