{"version":3,"file":"index.js","sources":["../src/useActiveWalletIds.js","../src/useAddCustomToken.js","../src/useArchivedWalletIds.js","../src/useBalances.js","../src/useBlockHeight.js","../src/useCancelOtpReset.js","../src/useChangePin.js","../src/useCheckPin.js","../src/useConvertCurrency.js","../src/useCreateAccount.js","../src/useCurrencyWallets.js","../src/useDataDump.js","../src/useDeletedWalletIds.js","../src/useDeleteLocalUser.js","../src/useDeletePin.js","../src/useDisableOtp.js","../src/useDisablePinLogin.js","../src/useDisableTokens.js","../src/useEnabledTokens.js","../src/useEnableOtp.js","../src/useEnablePinLogin.js","../src/useEnableTokens.js","../src/useFiatCurrencyCode.js","../src/useLocalStorageRead.js","../src/useLocalStorageWrite.js","../src/useLocalUsers.js","../src/useName.js","../src/useOtpKey.js","../src/useOtpResetDate.js","../src/useReceiveAddress.js","../src/useRecovery.js","../src/useRename.js","../src/useSetFiatCurrencyCode.js","../src/useStartEngine.js","../src/useStopEngine.js","../src/useSync.js","../src/useSyncedStorageRead.js","../src/useSyncedStorageWrite.js","../src/useSyncRatio.js","../src/useTransactionCount.js","../src/useTransactions.js"],"sourcesContent":["// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeAccount, 'activeWalletIds'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useActiveWalletIds = (account: EdgeAccount | null | void) => {\n  const [activeWalletIds, setActiveWalletIds]: [State, SetState] = useState(account ? account.activeWalletIds : null)\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setActiveWalletIds(account.activeWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('activeWalletIds', setActiveWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return activeWalletIds\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTokenInfo } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype AddCustomTokenStart = {| type: 'ADD_CUSTOM_TOKEN_START' |}\ntype AddCustomTokenSuccess = {| type: 'ADD_CUSTOM_TOKEN_SUCCESS' |}\ntype AddCustomTokenError = {| error: Error, type: 'ADD_CUSTOM_TOKEN_ERROR' |}\n\ntype Action = AddCustomTokenStart | AddCustomTokenSuccess | AddCustomTokenError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ADD_CUSTOM_TOKEN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ADD_CUSTOM_TOKEN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ADD_CUSTOM_TOKEN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useAddCustomToken = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const addCustomToken = (tokenInfo: EdgeTokenInfo) => {\n    if (!wallet) return\n    dispatch({ type: 'ADD_CUSTOM_TOKEN_START' })\n    wallet\n      .addCustomToken(tokenInfo)\n      .then(() => dispatch({ type: 'ADD_CUSTOM_TOKEN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ADD_CUSTOM_TOKEN_ERROR', error }))\n  }\n\n  return { ...state, addCustomToken }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeAccount, 'archivedWalletIds'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useArchivedWalletIds = (account: EdgeAccount | null | void) => {\n  const [archivedWalletIds, setArchivedWalletIds]: [State, SetState] = useState(\n    account ? account.activeWalletIds : null\n  )\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setArchivedWalletIds(account.archivedWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('archivedWalletIds', setArchivedWalletIds) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return archivedWalletIds\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeCurrencyWallet, 'balances'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useBalances = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [balances, setBalances]: [State, SetState] = useState(wallet ? wallet.balances : null)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    setBalances(wallet.balances)\n    const unsubscribe = wallet.watch('balances', setBalances) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return balances\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeCurrencyWallet, 'blockHeight'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useBlockHeight = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [blockHeight, setBlockHeight]: [State, SetState] = useState(wallet ? wallet.blockHeight : null)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    setBlockHeight(wallet.blockHeight)\n    const unsubscribe = wallet.watch('blockHeight', setBlockHeight) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return blockHeight\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CancelOtpResetStart = {| type: 'CANCEL_OTP_RESET_START' |}\ntype CancelOtpResetSuccess = {| type: 'CANCEL_OTP_RESET_SUCCESS' |}\ntype CancelOtpResetError = {| error: Error, type: 'CANCEL_OTP_RESET_ERROR' |}\n\ntype Action = CancelOtpResetStart | CancelOtpResetSuccess | CancelOtpResetError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CANCEL_OTP_RESET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CANCEL_OTP_RESET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CANCEL_OTP_RESET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCancelOtpReset = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const cancelOtpReset = () => {\n    if (!account) return\n    dispatch({ type: 'CANCEL_OTP_RESET_START' })\n    account\n      .cancelOtpReset()\n      .then(() => dispatch({ type: 'CANCEL_OTP_RESET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CANCEL_OTP_RESET_ERROR', error }))\n  }\n\n  return { ...state, cancelOtpReset }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ChangePinStart = {| type: 'CHANGE_PIN_START' |}\ntype ChangePinSuccess = {| type: 'CHANGE_PIN_SUCCESS' |}\ntype ChangePinError = {| error: Error, type: 'CHANGE_PIN_ERROR' |}\n\ntype Action = ChangePinStart | ChangePinSuccess | ChangePinError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_PIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHANGE_PIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CHANGE_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useChangePin = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const changePin = (pin: string) => {\n    if (!account || !pin) return\n    dispatch({ type: 'CHANGE_PIN_START' })\n    account\n      .changePin({ pin })\n      .then(() => dispatch({ type: 'CHANGE_PIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_PIN_ERROR', error }))\n  }\n\n  return { ...state, changePin }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CheckPinStart = {| type: 'CHECK_PIN_START' |}\ntype CheckPinSuccess = {| pinVerified: boolean, type: 'CHECK_PIN_SUCCESS' |}\ntype CheckPinError = {| error: Error, type: 'CHECK_PIN_ERROR' |}\n\ntype Action = CheckPinStart | CheckPinSuccess | CheckPinError\n\ntype State = {| error: Error | null, pending: boolean, pinVerified: boolean | null |}\n\nconst initialState: State = { error: null, pending: false, pinVerified: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHECK_PIN_START': {\n      return { ...state, pending: true, error: null, pinVerified: null }\n    }\n    case 'CHECK_PIN_SUCCESS': {\n      return { ...state, pending: false, pinVerified: true }\n    }\n    case 'CHECK_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCheckPin = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const checkPin = (pin: string) => {\n    if (!account || !pin) return\n    dispatch({ type: 'CHECK_PIN_START' })\n    account\n      .checkPin(pin)\n      .then((pinVerified: boolean) => dispatch({ type: 'CHECK_PIN_SUCCESS', pinVerified }))\n      .catch((error: Error) => dispatch({ type: 'CHECK_PIN_ERROR', error }))\n  }\n\n  return { ...state, checkPin }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ConvertCurrencyStart = {| type: 'CONVERT_CURRENCY_START' |}\ntype ConvertCurrencySuccess = {| amount: number, type: 'CONVERT_CURRENCY_SUCCESS' |}\ntype ConvertCurrencyError = {| error: Error, type: 'CONVERT_CURRENCY_ERROR' |}\ntype Action = ConvertCurrencyStart | ConvertCurrencySuccess | ConvertCurrencyError\n\ntype State = {| amount: number | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { amount: null, pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CONVERT_CURRENCY_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CONVERT_CURRENCY_SUCCESS': {\n      return { ...state, pending: false, amount: action.amount }\n    }\n    case 'CONVERT_CURRENCY_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useConvertCurrency = (\n  account: EdgeAccount | null | void,\n  fromCurrency: string | null | void,\n  toCurrency: string | null | void,\n  amount: number | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!account || !account.rateCache || !fromCurrency || !toCurrency || !amount) return // mount with null\n    dispatch({ type: 'CONVERT_CURRENCY_START' })\n    account.rateCache\n      .convertCurrency(fromCurrency, toCurrency, amount)\n      .then((amount: number) => dispatch({ type: 'CONVERT_CURRENCY_SUCCESS', amount }))\n      .catch((error: Error) => dispatch({ type: 'CONVERT_CURRENCY_ERROR', error })) // mount with account / null -> accoun / accounA -> accounB\n\n    const unsubscribe = account.rateCache.on('update', () => {\n      if (!account || !account.rateCache || !fromCurrency || !toCurrency || !amount) return\n      account.rateCache\n        .convertCurrency(fromCurrency, toCurrency, amount)\n        .then((amount: number) => dispatch({ type: 'CONVERT_CURRENCY_SUCCESS', amount }))\n        .catch((error: Error) => dispatch({ type: 'CONVERT_CURRENCY_ERROR', error }))\n    })\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CreateAccountStart = {| type: 'CREATE_ACCOUNT_START' |}\ntype CreateAccountSuccess = {| account: EdgeAccount, type: 'CREATE_ACCOUNT_SUCCESS' |}\ntype CreateAccountError = {| error: Error, type: 'CREATE_ACCOUNT_ERROR' |}\ntype Action = CreateAccountStart | CreateAccountSuccess | CreateAccountError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CREATE_ACCOUNT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CREATE_ACCOUNT_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'CREATE_ACCOUNT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCreateAccount = (context: EdgeContext | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const createAccount = (username: string, password?: string, pin?: string, options?: EdgeAccountOptions) => {\n    if (!context) return\n    dispatch({ type: 'CREATE_ACCOUNT_START' })\n    context\n      .createAccount(username, password, pin, options)\n      .then((account: EdgeAccount) => dispatch({ type: 'CREATE_ACCOUNT_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'CREATE_ACCOUNT_ERROR', error }))\n  }\n\n  return { ...state, createAccount }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeAccount, 'currencyWallets'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useCurrencyWallets = (account: EdgeAccount | null | void) => {\n  const [currencyWallets, setCurrencyWallets]: [State, SetState] = useState(account ? account.currencyWallets : null)\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setCurrencyWallets(account.currencyWallets) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('currencyWallets', setCurrencyWallets) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return currencyWallets\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeDataDump } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ReadDataDumpStart = {| type: 'READ_DATA_DUMP_START' |}\ntype ReadDataDumpSuccess = {| dataDump: EdgeDataDump, type: 'READ_DATA_DUMP_SUCCESS' |}\ntype ReadDataDumpError = {| error: Error, type: 'READ_DATA_DUMP_ERROR' |}\ntype Action = ReadDataDumpStart | ReadDataDumpSuccess | ReadDataDumpError\n\ntype State = {| dataDump: EdgeDataDump | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { dataDump: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_DATA_DUMP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_DATA_DUMP_SUCCESS': {\n      return { ...state, pending: false, dataDump: action.dataDump }\n    }\n    case 'READ_DATA_DUMP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDataDump = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getDataDump = () => {\n    if (!wallet) return\n    dispatch({ type: 'READ_DATA_DUMP_START' })\n    wallet\n      .dumpData()\n      .then((dataDump: EdgeDataDump) => dispatch({ type: 'READ_DATA_DUMP_SUCCESS', dataDump }))\n      .catch((error: Error) => dispatch({ type: 'READ_DATA_DUMP_ERROR', error }))\n  }\n\n  return { ...state, getDataDump }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeWalletInfoFull } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = Array<string> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useDeletedWalletIds = (account: EdgeAccount | null | void) => {\n  const [deletedWalletIds, setDeletedWalletIds]: [State, SetState] = useState(\n    account ? getDeletedWalletIds(account.allKeys) : null\n  )\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setDeletedWalletIds(getDeletedWalletIds(account.allKeys)) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('allKeys', allKeys => setDeletedWalletIds(getDeletedWalletIds(allKeys))) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return deletedWalletIds\n}\n\nconst getDeletedWalletIds = (walletInfos: Array<EdgeWalletInfoFull>) => {\n  const deletedWalletInfos: Array<EdgeWalletInfoFull> = walletInfos.filter(key => key.deleted)\n  const deletedWalletIds: Array<string> = deletedWalletInfos.map((key: EdgeWalletInfoFull) => key.id)\n\n  return deletedWalletIds\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeleteLocalUserStart = {| type: 'DELETE_LOCAL_USER_START' |}\ntype DeleteLocalUserSuccess = {| type: 'DELETE_LOCAL_USER_SUCCESS' |}\ntype DeleteLocalUserError = {| error: Error, type: 'DELETE_LOCAL_USER_ERROR' |}\n\ntype Action = DeleteLocalUserStart | DeleteLocalUserSuccess | DeleteLocalUserError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_LOCAL_USER_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_LOCAL_USER_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_LOCAL_USER_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeleteLocalUser = (context: EdgeContext | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deleteLocalUser = (username: string) => {\n    if (!context) return\n    dispatch({ type: 'DELETE_LOCAL_USER_START' })\n    context\n      .deleteLocalAccount(username)\n      .then(() => dispatch({ type: 'DELETE_LOCAL_USER_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_LOCAL_USER_ERROR', error }))\n  }\n\n  return { ...state, deleteLocalUser }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeletePinStart = {| type: 'DELETE_PIN_START' |}\ntype DeletePinSuccess = {| type: 'DELETE_PIN_SUCCESS' |}\ntype DeletePinError = {| error: Error, type: 'DELETE_PIN_ERROR' |}\n\ntype Action = DeletePinStart | DeletePinSuccess | DeletePinError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_PIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_PIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeletePin = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enablePinLogin = () => {\n    if (!account) return\n    dispatch({ type: 'DELETE_PIN_START' })\n    account\n      .deletePin()\n      .then(() => dispatch({ type: 'DELETE_PIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_PIN_ERROR', error }))\n  }\n\n  return { ...state, enablePinLogin }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisableOtpStart = {| type: 'DISABLE_OTP_START' |}\ntype DisableOtpSuccess = {| type: 'DISABLE_OTP_SUCCESS' |}\ntype DisableOtpError = {| error: Error, type: 'DISABLE_OTP_ERROR' |}\n\ntype Action = DisableOtpStart | DisableOtpSuccess | DisableOtpError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_OTP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_OTP_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_OTP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisableOtp = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disableOtp = () => {\n    if (!account) return\n    dispatch({ type: 'DISABLE_OTP_START' })\n    account\n      .disableOtp()\n      .then(() => dispatch({ type: 'DISABLE_OTP_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_OTP_ERROR', error }))\n  }\n\n  return { ...state, disableOtp }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisablePinLoginStart = {| type: 'DISABLE_PIN_LOGIN_START' |}\ntype DisablePinLoginSuccess = {| type: 'DISABLE_PIN_LOGIN_SUCCESS' |}\ntype DisablePinLoginError = {| error: Error, type: 'DISABLE_PIN_LOGIN_ERROR' |}\n\ntype Action = DisablePinLoginStart | DisablePinLoginSuccess | DisablePinLoginError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_PIN_LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_PIN_LOGIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_PIN_LOGIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisablePinLogin = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disablePinLogin = (pin: string) => {\n    if (!account || !pin) return\n    dispatch({ type: 'DISABLE_PIN_LOGIN_START' })\n    account\n      .changePin({ enableLogin: false })\n      .then(() => dispatch({ type: 'DISABLE_PIN_LOGIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_PIN_LOGIN_ERROR', error }))\n  }\n\n  return { ...state, disablePinLogin }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisableTokensStart = {| type: 'DISABLE_TOKENS_START' |}\ntype DisableTokensSuccess = {| type: 'DISABLE_TOKENS_SUCCESS' |}\ntype DisableTokensError = {| error: Error, type: 'DISABLE_TOKENS_ERROR' |}\n\ntype Action = DisableTokensStart | DisableTokensSuccess | DisableTokensError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_TOKENS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisableTokens = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disableTokens = (tokens: Array<string>) => {\n    if (!wallet) return\n    dispatch({ type: 'DISABLE_TOKENS_START' })\n    wallet\n      .disableTokens(tokens)\n      .then(() => dispatch({ type: 'DISABLE_TOKENS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_TOKENS_ERROR', error }))\n  }\n\n  return { ...state, disableTokens }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadEnabledTokensStart = {| type: 'READ_ENABLED_TOKENS_START' |}\ntype ReadEnabledTokensSuccess = {| enabledTokens: Array<string>, type: 'READ_ENABLED_TOKENS_SUCCESS' |}\ntype ReadEnabledTokensError = {| error: Error, type: 'READ_ENABLED_TOKENS_ERROR' |}\n\ntype Action = ReadEnabledTokensStart | ReadEnabledTokensSuccess | ReadEnabledTokensError\n\ntype State = {| enabledTokens: Array<string> | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { enabledTokens: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_ENABLED_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_ENABLED_TOKENS_SUCCESS': {\n      return { ...state, pending: false, enabledTokens: action.enabledTokens }\n    }\n    case 'READ_ENABLED_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnabledTokens = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_ENABLED_TOKENS_START' })\n    wallet\n      .getEnabledTokens()\n      .then((enabledTokens: Array<string>) => dispatch({ type: 'READ_ENABLED_TOKENS_SUCCESS', enabledTokens }))\n      .catch((error: Error) => dispatch({ type: 'READ_ENABLED_TOKENS_ERROR', error }))\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnableOtpStart = {| type: 'ENABLE_OTP_START' |}\ntype EnableOtpSuccess = {| type: 'ENABLE_OTP_SUCCESS' |}\ntype EnableOtpError = {| error: Error, type: 'ENABLE_OTP_ERROR' |}\n\ntype Action = EnableOtpStart | EnableOtpSuccess | EnableOtpError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_OTP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_OTP_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_OTP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnableOtp = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enableOtp = () => {\n    if (!account) return\n    dispatch({ type: 'ENABLE_OTP_START' })\n    account\n      .enableOtp()\n      .then(() => dispatch({ type: 'ENABLE_OTP_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_OTP_ERROR', error }))\n  }\n\n  return { ...state, enableOtp }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnablePinLoginStart = {| type: 'ENABLE_PIN_LOGIN_START' |}\ntype EnablePinLoginSuccess = {| type: 'ENABLE_PIN_LOGIN_SUCCESS' |}\ntype EnablePinLoginError = {| error: Error, type: 'ENABLE_PIN_LOGIN_ERROR' |}\n\ntype Action = EnablePinLoginStart | EnablePinLoginSuccess | EnablePinLoginError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_PIN_LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_PIN_LOGIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_PIN_LOGIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnablePinLogin = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enablePinLogin = (pin: string) => {\n    if (!account || !pin) return\n    dispatch({ type: 'ENABLE_PIN_LOGIN_START' })\n    account\n      .changePin({ enableLogin: true })\n      .then(() => dispatch({ type: 'ENABLE_PIN_LOGIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_PIN_LOGIN_ERROR', error }))\n  }\n\n  return { ...state, enablePinLogin }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnableTokensStart = {| type: 'ENABLE_TOKENS_START' |}\ntype EnableTokensSuccess = {| type: 'ENABLE_TOKENS_SUCCESS' |}\ntype EnableTokensError = {| error: Error, type: 'ENABLE_TOKENS_ERROR' |}\n\ntype Action = EnableTokensStart | EnableTokensSuccess | EnableTokensError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_TOKENS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnableTokens = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disableTokens = (tokens: Array<string>) => {\n    if (!wallet) return\n    dispatch({ type: 'ENABLE_TOKENS_START' })\n    wallet\n      .enableTokens(tokens)\n      .then(() => dispatch({ type: 'ENABLE_TOKENS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_TOKENS_ERROR', error }))\n  }\n\n  return { ...state, disableTokens }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useFiatCurrencyCode = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [fiatCurrencyCode, setFiatCurrencyCode] = useState(null)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    setFiatCurrencyCode(wallet.fiatCurrencyCode)\n    const unsubscribe = wallet.watch('fiatCurrencyCode', setFiatCurrencyCode) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return fiatCurrencyCode\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype ReadStart = {| type: 'READ_START' |}\ntype ReadSuccess = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype ReadError = {| error: Error, type: 'READ_ERROR' |}\n\ntype Action = ReadStart | ReadSuccess | ReadError\n\ntype State = {| data: Stringifyable | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { data: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_SUCCESS': {\n      return { ...state, pending: false, data: action.data }\n    }\n    case 'READ_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLocalStorageRead = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.localDisklet\n      .getText(path)\n      .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n      .catch((error: Error) => dispatch({ type: 'READ_ERROR', error })) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n\n    const unsubscribe = storageContext.watch(\n      'localDisklet',\n      (localDisklet: $PropertyType<EdgeAccount | EdgeCurrencyWallet, 'localDisklet'>) => {\n        if (!storageContext || !path) return\n        localDisklet\n          .getText(path)\n          .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n          .catch((error: Error) => dispatch({ type: 'READ_ERROR', error }))\n      }\n    )\n    return unsubscribe // unmount with storageContext / storageContextA -> storageContextB (1) / storageContext -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [storageContext]) // onUpdate\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WriteStart = {| type: 'WRITE_START' |}\ntype WriteSuccess = {| type: 'WRITE_SUCCESS' |}\ntype WriteError = {| error: Error, type: 'WRITE_ERROR' |}\n\ntype Action = WriteStart | WriteSuccess | WriteError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLocalStorageWrite = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setData = (data: Stringifyable) => {\n    if (!storageContext || !path) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.localDisklet\n      .setText(path, JSON.stringify(data))\n      .then(() => dispatch({ type: 'WRITE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_ERROR', error }))\n  }\n\n  return { ...state, setData }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useLocalUsers = (context: EdgeContext | null | void) => {\n  const [localUsers, setLocalUsers] = useState(null)\n\n  const effect = () => {\n    if (!context) return // mount with null\n    setLocalUsers(context.localUsers)\n    const unsubscribe = context.watch('localUsers', setLocalUsers) // mount with context / null -> context / contextA -> contextB (2)\n    return unsubscribe // unmount with context / contextA -> contextB (1) / context -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [context]) // onUpdate\n\n  return localUsers\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeCurrencyWallet, 'name'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useName = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [name, setName]: [State, SetState] = useState(wallet ? wallet.name : null)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    setName(wallet.name) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    const unsubscribe = wallet.watch('name', setName) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return name\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeAccount, 'otpKey'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useOtpKey = (account: EdgeAccount | null | void) => {\n  const [otpKey, setOtpKey]: [State, SetState] = useState(account ? account.otpKey : null)\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setOtpKey(account.otpKey) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('otpKey', setOtpKey) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return otpKey\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeAccount, 'otpResetDate'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useOtpResetDate = (account: EdgeAccount | null | void) => {\n  const [otpResetDate, setOtpResetDate]: [State, SetState] = useState(account ? account.otpResetDate : null)\n\n  const effect = () => {\n    if (!account) return // mount with null\n    setOtpResetDate(account.otpResetDate) // mount with account / null -> account / accountA -> accountB (2)\n    const unsubscribe = account.watch('otpResetDate', setOtpResetDate) // mount with account / null -> account / accountA -> accountB (2)\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [account]) // onUpdate\n\n  return otpResetDate\n}\n","// @flow\n\nimport { type EdgeCurrencyCodeOptions, type EdgeCurrencyWallet, type EdgeReceiveAddress } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadReceiveAddressStart = {| type: 'READ_RECEIVE_ADDRESS_START' |}\ntype ReadReceiveAddressSuccess = {| receiveAddress: EdgeReceiveAddress, type: 'READ_RECEIVE_ADDRESS_SUCCESS' |}\ntype ReadReceiveAddressError = {| error: Error, type: 'READ_RECEIVE_ADDRESS_ERROR' |}\n\ntype Action = ReadReceiveAddressStart | ReadReceiveAddressSuccess | ReadReceiveAddressError\n\ntype State = {| error: Error | null, pending: boolean, receiveAddress: EdgeReceiveAddress | null |}\n\nconst initialState: State = { pending: false, error: null, receiveAddress: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_RECEIVE_ADDRESS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_RECEIVE_ADDRESS_SUCCESS': {\n      return { ...state, pending: false, receiveAddress: action.receiveAddress }\n    }\n    case 'READ_RECEIVE_ADDRESS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useReceiveAddress = (\n  wallet: EdgeCurrencyWallet | null | void,\n  options: EdgeCurrencyCodeOptions | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_RECEIVE_ADDRESS_START' })\n    wallet\n      .getReceiveAddress(options || undefined)\n      .then((receiveAddress: EdgeReceiveAddress) => dispatch({ type: 'READ_RECEIVE_ADDRESS_SUCCESS', receiveAddress }))\n      .catch((error: Error) => dispatch({ type: 'READ_RECEIVE_ADDRESS_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_RECEIVE_ADDRESS_START' })\n      wallet\n        .getReceiveAddress(options || undefined)\n        .then((receiveAddress: EdgeReceiveAddress) =>\n          dispatch({ type: 'READ_RECEIVE_ADDRESS_SUCCESS', receiveAddress })\n        )\n        .catch((error: Error) => dispatch({ type: 'READ_RECEIVE_ADDRESS_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CHANGE_RECOVERY_START = { type: 'CHANGE_RECOVERY_START' }\ntype DELETE_RECOVERY_START = { type: 'DELETE_RECOVERY_START' }\n\ntype CHANGE_RECOVERY_SUCCESS = { type: 'CHANGE_RECOVERY_SUCCESS' }\ntype DELETE_RECOVERY_SUCCESS = { type: 'DELETE_RECOVERY_SUCCESS' }\n\ntype CHANGE_RECOVERY_ERROR = { error: Error, type: 'CHANGE_RECOVERY_ERROR' }\ntype DELETE_RECOVERY_ERROR = { error: Error, type: 'DELETE_RECOVERY_ERROR' }\n\ntype Action =\n  | CHANGE_RECOVERY_START\n  | CHANGE_RECOVERY_SUCCESS\n  | CHANGE_RECOVERY_ERROR\n  | DELETE_RECOVERY_START\n  | DELETE_RECOVERY_SUCCESS\n  | DELETE_RECOVERY_ERROR\n\ntype State = {\n  changeRecoveryError: Error | null,\n  changeRecoveryPending: boolean,\n  deleteRecoveryError: Error | null,\n  deleteRecoveryPending: boolean\n}\n\nconst initialState: State = {\n  changeRecoveryError: null,\n  changeRecoveryPending: false,\n  deleteRecoveryError: null,\n  deleteRecoveryPending: false\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_RECOVERY_START': {\n      return { ...state, changeRecoveryPending: true, changeRecoveryError: null }\n    }\n    case 'DELETE_RECOVERY_START': {\n      return { ...state, deleteRecoveryPending: true, deleteRecoveryError: null }\n    }\n\n    case 'CHANGE_RECOVERY_SUCCESS': {\n      return { ...state, changeRecoveryPending: false }\n    }\n    case 'DELETE_RECOVERY_SUCCESS': {\n      return { ...state, deleteRecoveryPending: false }\n    }\n\n    case 'CHANGE_RECOVERY_ERROR': {\n      return { ...state, changeRecoveryPending: true, changeRecoveryError: action.error }\n    }\n    case 'DELETE_RECOVERY_ERROR': {\n      return { ...state, deleteRecoveryPending: true, deleteRecoveryError: action.error }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport const useRecovery = (account: EdgeAccount | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const changeRecovery = (questions: Array<string>, answers: Array<string>) => {\n    if (!account || !questions || !answers) return\n    dispatch({ type: 'CHANGE_RECOVERY_START' })\n    account\n      .changeRecovery(questions, answers)\n      .then(() => dispatch({ type: 'CHANGE_RECOVERY_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_RECOVERY_ERROR', error }))\n  }\n\n  const deleteRecovery = () => {\n    if (!account) return\n    dispatch({ type: 'DELETE_RECOVERY_START' })\n    account\n      .deleteRecovery()\n      .then(() => dispatch({ type: 'DELETE_RECOVERY_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_RECOVERY_ERROR', error }))\n  }\n\n  return { ...state, changeRecovery, deleteRecovery }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype RenameStart = {| type: 'RENAME_START' |}\ntype RenameSuccess = {| name: string | null, type: 'RENAME_SUCCESS' |}\ntype RenameError = {| error: Error, type: 'RENAME_ERROR' |}\ntype Action = RenameStart | RenameSuccess | RenameError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'RENAME_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'RENAME_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'RENAME_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useRename = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const rename = (name: string) => {\n    if (!wallet) return\n    dispatch({ type: 'RENAME_START' })\n    wallet\n      .renameWallet(name)\n      .then(() => dispatch({ type: 'RENAME_SUCCESS', name }))\n      .catch((error: Error) => dispatch({ type: 'RENAME_ERROR', error }))\n  }\n\n  return { ...state, rename }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype WriteFiatCurrencyCodeStart = {| type: 'WRITE_FIAT_CURRENCY_CODE_START' |}\ntype WriteFiatCurrencyCodeSuccess = {| fiatCurrencyCode: string, type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS' |}\ntype WriteFiatCurrencyCodeError = {| error: Error, type: 'WRITE_FIAT_CURRENCY_CODE_ERROR' |}\ntype Action = WriteFiatCurrencyCodeStart | WriteFiatCurrencyCodeSuccess | WriteFiatCurrencyCodeError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_FIAT_CURRENCY_CODE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_FIAT_CURRENCY_CODE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_FIAT_CURRENCY_CODE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSetFiatCurrencyCode = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setFiatCurrencyCode = (fiatCurrencyCode: string) => {\n    if (!wallet) return\n    dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_START' })\n    wallet\n      .setFiatCurrencyCode(fiatCurrencyCode)\n      .then(() => dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS', fiatCurrencyCode }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_ERROR', error }))\n  }\n\n  return { ...state, setFiatCurrencyCode }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype StartEngineStart = {| type: 'START_ENGINE_START' |}\ntype StartEngineSuccess = {| type: 'START_ENGINE_SUCCESS' |}\ntype StartEngineError = {| error: Error, type: 'START_ENGINE_ERROR' |}\ntype Action = StartEngineStart | StartEngineSuccess | StartEngineError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'START_ENGINE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'START_ENGINE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'START_ENGINE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useStartEngine = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const startEngine = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'START_ENGINE_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .startEngine()\n      .then(() => dispatch({ type: 'START_ENGINE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'START_ENGINE_ERROR', error }))\n  }\n\n  return { ...state, startEngine }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype StopEngineStart = {| type: 'STOP_ENGINE_START' |}\ntype StopEngineSuccess = {| type: 'STOP_ENGINE_SUCCESS' |}\ntype StopEngineError = {| error: Error, type: 'STOP_ENGINE_ERROR' |}\ntype Action = StopEngineStart | StopEngineSuccess | StopEngineError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'STOP_ENGINE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'STOP_ENGINE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'STOP_ENGINE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useStopEngine = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const stopEngine = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'STOP_ENGINE_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .stopEngine()\n      .then(() => dispatch({ type: 'STOP_ENGINE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'STOP_ENGINE_ERROR', error }))\n  }\n\n  return { ...state, stopEngine }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SyncStart = {| type: 'SYNC_START' |}\ntype SyncSuccess = {| type: 'SYNC_SUCCESS' |}\ntype SyncError = {| error: Error, type: 'SYNC_ERROR' |}\ntype Action = SyncStart | SyncSuccess | SyncError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SYNC_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SYNC_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SYNC_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSync = (storageContext: EdgeAccount | EdgeCurrencyWallet | null | void) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const sync = () => {\n    if (!storageContext) return // mount with null\n    dispatch({ type: 'SYNC_START' }) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB (2)\n    storageContext\n      .sync()\n      .then(() => dispatch({ type: 'SYNC_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SYNC_ERROR', error }))\n  }\n\n  return { ...state, sync }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype ReadStart = {| type: 'READ_START' |}\ntype ReadSuccess = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype ReadError = {| error: Error, type: 'READ_ERROR' |}\ntype Action = ReadStart | ReadSuccess | ReadError\n\ntype State = {| data: Stringifyable | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { data: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_SUCCESS': {\n      return { ...state, pending: false, data: action.data }\n    }\n    case 'READ_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSyncedStorageRead = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.disklet\n      .getText(path)\n      .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n      .catch((error: Error) => dispatch({ type: 'READ_ERROR', error })) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n\n    const unsubscribe = storageContext.watch(\n      'disklet',\n      (disklet: $PropertyType<EdgeAccount | EdgeCurrencyWallet, 'disklet'>) => {\n        if (!storageContext || !path) return\n        disklet\n          .getText(path)\n          .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n          .catch((error: Error) => dispatch({ type: 'READ_ERROR', error }))\n      }\n    )\n    return unsubscribe // unmount with storageContext / storageContextA -> storageContextB (1) / storageContext -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [storageContext]) // onUpdate\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WriteStart = {| type: 'WRITE_START' |}\ntype WriteSuccess = {| type: 'WRITE_SUCCESS' |}\ntype WriteError = {| error: Error, type: 'WRITE_ERROR' |}\ntype Action = WriteStart | WriteSuccess | WriteError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSyncedStorageWrite = (\n  storageContext: EdgeAccount | EdgeCurrencyWallet | null | void,\n  path: string | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setData = (data: Stringifyable) => {\n    if (!storageContext || !path) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.disklet\n      .setText(path, JSON.stringify(data))\n      .then(() => dispatch({ type: 'WRITE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_ERROR', error }))\n  }\n\n  return { ...state, setData }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\ntype State = $PropertyType<EdgeCurrencyWallet, 'syncRatio'> | null\ntype SetState = (State | (State => State)) => void\n\nexport const useSyncRatio = (wallet: EdgeCurrencyWallet | null | void) => {\n  const [syncRatio, setSyncRatio]: [State, SetState] = useState(wallet ? wallet.syncRatio : null)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    setSyncRatio(wallet.syncRatio)\n    const unsubscribe = wallet.watch('syncRatio', setSyncRatio) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return syncRatio\n}\n","// @flow\n\nimport { type EdgeCurrencyCodeOptions, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadTransactionCountStart = {| type: 'READ_TRANSACTION_COUNT_START' |}\ntype ReadTransactionCountSuccess = {| transactionCount: number, type: 'READ_TRANSACTION_COUNT_SUCCESS' |}\ntype ReadTransactionCountError = {| error: Error, type: 'READ_TRANSACTION_COUNT_ERROR' |}\ntype Action = ReadTransactionCountStart | ReadTransactionCountSuccess | ReadTransactionCountError\n\ntype State = {| error: Error | null, pending: boolean, transactionCount: number | null |}\n\nconst initialState: State = { pending: false, error: null, transactionCount: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_TRANSACTION_COUNT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_TRANSACTION_COUNT_SUCCESS': {\n      return { ...state, pending: false, transactionCount: action.transactionCount }\n    }\n    case 'READ_TRANSACTION_COUNT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useTransactionCount = (\n  wallet: EdgeCurrencyWallet | null | void,\n  options: EdgeCurrencyCodeOptions | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_TRANSACTION_COUNT_START' })\n    wallet\n      .getNumTransactions(options || undefined)\n      .then((transactionCount: number) => dispatch({ type: 'READ_TRANSACTION_COUNT_SUCCESS', transactionCount }))\n      .catch((error: Error) => dispatch({ type: 'READ_TRANSACTION_COUNT_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_TRANSACTION_COUNT_START' })\n      wallet\n        .getNumTransactions(options || undefined)\n        .then((transactionCount: number) => dispatch({ type: 'READ_TRANSACTION_COUNT_SUCCESS', transactionCount }))\n        .catch((error: Error) => dispatch({ type: 'READ_TRANSACTION_COUNT_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return { ...state }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeGetTransactionsOptions, type EdgeTransaction } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype Transactions = Array<EdgeTransaction>\n\ntype ReadTransactionsStart = {| type: 'READ_TRANSACTIONS_START' |}\ntype ReadTransactionsSuccess = {| transactions: Transactions, type: 'READ_TRANSACTIONS_SUCCESS' |}\ntype ReadTransactionsError = {| error: Error, type: 'READ_TRANSACTIONS_ERROR' |}\ntype Action = ReadTransactionsStart | ReadTransactionsSuccess | ReadTransactionsError\n\ntype State = {| error: Error | null, pending: boolean, transactions: Transactions | null |}\n\nconst initialState: State = { pending: false, error: null, transactions: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_TRANSACTIONS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_TRANSACTIONS_SUCCESS': {\n      return { ...state, pending: false, transactions: action.transactions }\n    }\n    case 'READ_TRANSACTIONS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useTransactions = (\n  wallet: EdgeCurrencyWallet | null | void,\n  options: EdgeGetTransactionsOptions | null | void\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_TRANSACTIONS_START' })\n    wallet\n      .getTransactions(options || undefined)\n      .then((transactions: Transactions) => dispatch({ type: 'READ_TRANSACTIONS_SUCCESS', transactions }))\n      .catch((error: Error) => dispatch({ type: 'READ_TRANSACTIONS_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_TRANSACTIONS_START' })\n      wallet\n        .getTransactions(options || undefined)\n        .then((transactions: Transactions) => dispatch({ type: 'READ_TRANSACTIONS_SUCCESS', transactions }))\n        .catch((error: Error) => dispatch({ type: 'READ_TRANSACTIONS_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, []) // onMount\n  useEffect(effect, [wallet]) // onUpdate\n\n  return { ...state }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAMkD;;;;;;;;;;;;;;;;;;;;;;;;;;kBCOhC;;;;;;;;;;;;;;;;;;;;;mCAqBiB;;;;;;;;;;AC5Be;;4CAEN;;;;;;;;;;;;;;;;;;;ACFM;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;kBCOhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRyC;;;;;kBAK5D;;;;;;;;;;;;;;;;;;;SAmBT;;;QAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BkE;;;;;;;;;;;;;;;;;;;;;;;;;;iCA0BzC;;;;;;;;;;AC3BiB;;;;;;;;;;;;;;;;;;;;ACCuB;;;;;kBAKvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCC4Bf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCrBjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCFnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;6BAqBW;;;;;;;;;;;;;;;;;kBCrBX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCCRwB;;;;;;;;;;;;;;;;;;;;;;ACIa;;AAEN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA2C1B;;;;;;;;;;;;AC7CkC;;AAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BCNf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCa;;;uBAG3B;;;;;;;;;;;;;;;;ACH2B;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QC0B1C;SACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCC+B0B;;;;;;;;;;;;;;;;;;;;ACzDwB;;;;;kBAKzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL0E;;;;;kBAK1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLoD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAF;;;;;;;8BAO/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCW;;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA2C1B;;;;;;;;;;;AC7CwB;;AAEK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJF;;;;;;;;;;;;;;;;;;;;ACCuC;;;;;kBAKvE;;;;;;;;;;;;;;;;;;;QAmBV;SACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxByF;;AAEb;;;;;;;;;;;;;;;;;;;;;;;QAuB7E;;;;;;;;;;;;;;;;;;;2BAmBa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}