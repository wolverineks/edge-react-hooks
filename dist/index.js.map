{"version":3,"file":"index.js","sources":["../src/useActivateWallet.js","../src/useAddCustomToken.js","../src/useArchiveWallet.js","../src/useBroadcastTransaction.js","../src/useCancelOtpReset.js","../src/useChangePassword.js","../src/useChangePin.js","../src/useChangeRecovery.js","../src/useChangeWalletStates.js","../src/useCheckPassword.js","../src/useCheckPin.js","../src/useCheckPinLoginEnabled.js","../src/useCheckUsernameAvailability.js","../src/useConvertCurrency.js","../src/useCreateAccount.js","../src/useCreateCurrencyWallet.js","../src/useCreateWallet.js","../src/useDataDump.js","../src/useDeleteLocalUser.js","../src/useDeletePassword.js","../src/useDeletePin.js","../src/useDeleteRecovery.js","../src/useDeleteWallet.js","../src/useDisableOtp.js","../src/useDisablePinLogin.js","../src/useDisableTokens.js","../src/useEdgeAccount.js","../src/useEdgeContext.js","../src/useEdgeCurrencyWallet.js","../src/useEnabledTokens.js","../src/useEnableOtp.js","../src/useEnablePinLogin.js","../src/useEnableTokens.js","../src/useEncodeUri.js","../src/useExportToCsv.js","../src/useExportToQbo.js","../src/useFetchLobby.js","../src/useFetchLoginMessages.js","../src/useFetchRecovery2Questions.js","../src/useFixUsername.js","../src/useGetPaymentProtocolInfo.js","../src/useGetRecovery2Key.js","../src/useListRecoveryQuestionChoices.js","../src/useListUsernames.js","../src/useLocalStorageRead.js","../src/useLocalStorageWrite.js","../src/useLockReceiveAddress.js","../src/useLoginWithKey.js","../src/useLoginWithPassword.js","../src/useLoginWithPin.js","../src/useLoginWithRecovery2.js","../src/useLogout.js","../src/useMakeEdgeContext.js","../src/useMakeSpend.js","../src/useMaxSpendable.js","../src/useParseUri.js","../src/useReceiveAddress.js","../src/useRename.js","../src/useRequestEdgeLogin.js","../src/useRequestOtpReset.js","../src/useResyncBlockchain.js","../src/useSaveReceiveAddress.js","../src/useSaveTransaction.js","../src/useSaveTransactionMetadata.js","../src/useSetFiatCurrencyCode.js","../src/useSignBroadcastAndSaveTransaction.js","../src/useSignTransaction.js","../src/useStartEngine.js","../src/useStopEngine.js","../src/useSweepPrivateKeys.js","../src/useSync.js","../src/useSyncedStorageRead.js","../src/useSyncedStorageWrite.js","../src/useTransactionCount.js","../src/useTransactions.js","../src/useValidatePassword.js"],"sourcesContent":["// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ActivateWalletStart = {| type: 'ACTIVATE_WALLET_START' |}\ntype ActivateWalletSuccess = {| type: 'ACTIVATE_WALLET_SUCCESS' |}\ntype ActivateWalletError = {| error: Error, type: 'ACTIVATE_WALLET_ERROR' |}\n\ntype Action = ActivateWalletStart | ActivateWalletSuccess | ActivateWalletError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ACTIVATE_WALLET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ACTIVATE_WALLET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ACTIVATE_WALLET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useActivateWallet = (account: ?EdgeAccount, walletId: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const activateWallet = () => {\n    if (!account || !account.loggedIn || !walletId) return\n    dispatch({ type: 'ACTIVATE_WALLET_START' })\n    account\n      .changeWalletStates({ [walletId]: { archived: false } })\n      .then(() => dispatch({ type: 'ACTIVATE_WALLET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ACTIVATE_WALLET_ERROR', error }))\n  }\n\n  return { ...state, activateWallet }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTokenInfo } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype AddCustomTokenStart = {| type: 'ADD_CUSTOM_TOKEN_START' |}\ntype AddCustomTokenSuccess = {| type: 'ADD_CUSTOM_TOKEN_SUCCESS' |}\ntype AddCustomTokenError = {| error: Error, type: 'ADD_CUSTOM_TOKEN_ERROR' |}\n\ntype Action = AddCustomTokenStart | AddCustomTokenSuccess | AddCustomTokenError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ADD_CUSTOM_TOKEN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ADD_CUSTOM_TOKEN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ADD_CUSTOM_TOKEN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useAddCustomToken = (wallet: ?EdgeCurrencyWallet, tokenInfo: ?EdgeTokenInfo) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const addCustomToken = () => {\n    if (!wallet || !tokenInfo) return\n    dispatch({ type: 'ADD_CUSTOM_TOKEN_START' })\n    wallet\n      .addCustomToken(tokenInfo)\n      .then(() => dispatch({ type: 'ADD_CUSTOM_TOKEN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ADD_CUSTOM_TOKEN_ERROR', error }))\n  }\n\n  return { ...state, addCustomToken }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ArchiveWalletStart = {| type: 'ARCHIVE_WALLET_START' |}\ntype ArchiveWalletSuccess = {| type: 'ARCHIVE_WALLET_SUCCESS' |}\ntype ArchiveWalletError = {| error: Error, type: 'ARCHIVE_WALLET_ERROR' |}\n\ntype Action = ArchiveWalletStart | ArchiveWalletSuccess | ArchiveWalletError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ARCHIVE_WALLET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ARCHIVE_WALLET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ARCHIVE_WALLET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useArchiveWallet = (account: ?EdgeAccount, walletId: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const archiveWallet = () => {\n    if (!account || !account.loggedIn || !walletId) return\n    dispatch({ type: 'ARCHIVE_WALLET_START' })\n    account\n      .changeWalletStates({ [walletId]: { archived: true } })\n      .then(() => dispatch({ type: 'ARCHIVE_WALLET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ARCHIVE_WALLET_ERROR', error }))\n  }\n\n  return { ...state, archiveWallet }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTransaction } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype BroadcastTransactionStart = {| type: 'BROADCAST_TRANSACTION_START' |}\ntype BroadcastTransactionSuccess = {| type: 'BROADCAST_TRANSACTION_SUCCESS' |}\ntype BroadcastTransactionError = {| error: Error, type: 'BROADCAST_TRANSACTION_ERROR' |}\n\ntype Action = BroadcastTransactionStart | BroadcastTransactionSuccess | BroadcastTransactionError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'BROADCAST_TRANSACTION_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'BROADCAST_TRANSACTION_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'BROADCAST_TRANSACTION_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useBroadcastTransaction = (wallet: ?EdgeCurrencyWallet, transaction: ?EdgeTransaction) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const broadcastTransaction = () => {\n    if (!wallet || !transaction) return\n    dispatch({ type: 'BROADCAST_TRANSACTION_START' })\n    wallet\n      .broadcastTx(transaction)\n      .then(() => dispatch({ type: 'BROADCAST_TRANSACTION_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'BROADCAST_TRANSACTION_ERROR', error }))\n  }\n\n  return { ...state, broadcastTransaction }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CancelOtpResetStart = {| type: 'CANCEL_OTP_RESET_START' |}\ntype CancelOtpResetSuccess = {| type: 'CANCEL_OTP_RESET_SUCCESS' |}\ntype CancelOtpResetError = {| error: Error, type: 'CANCEL_OTP_RESET_ERROR' |}\n\ntype Action = CancelOtpResetStart | CancelOtpResetSuccess | CancelOtpResetError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CANCEL_OTP_RESET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CANCEL_OTP_RESET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CANCEL_OTP_RESET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCancelOtpReset = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const cancelOtpReset = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'CANCEL_OTP_RESET_START' })\n    account\n      .cancelOtpReset()\n      .then(() => dispatch({ type: 'CANCEL_OTP_RESET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CANCEL_OTP_RESET_ERROR', error }))\n  }\n\n  return { ...state, cancelOtpReset }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ChangePasswordStart = {| type: 'CHANGE_PASSWORD_START' |}\ntype ChangePasswordSuccess = {| type: 'CHANGE_PASSWORD_SUCCESS' |}\ntype ChangePasswordError = {| error: Error, type: 'CHANGE_PASSWORD_ERROR' |}\n\ntype Action = ChangePasswordStart | ChangePasswordSuccess | ChangePasswordError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_PASSWORD_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHANGE_PASSWORD_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CHANGE_PASSWORD_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useChangePassword = (account: ?EdgeAccount, password: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const changePassword = () => {\n    if (!account || !account.loggedIn || !password) return\n    dispatch({ type: 'CHANGE_PASSWORD_START' })\n    account\n      .changePassword(password)\n      .then(() => dispatch({ type: 'CHANGE_PASSWORD_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_PASSWORD_ERROR', error }))\n  }\n\n  return { ...state, changePassword }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ChangePinStart = {| type: 'CHANGE_PIN_START' |}\ntype ChangePinSuccess = {| type: 'CHANGE_PIN_SUCCESS' |}\ntype ChangePinError = {| error: Error, type: 'CHANGE_PIN_ERROR' |}\n\ntype Action = ChangePinStart | ChangePinSuccess | ChangePinError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_PIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHANGE_PIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CHANGE_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useChangePin = (account: ?EdgeAccount, pin: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const changePin = () => {\n    if (!account || !account.loggedIn || !pin) return\n    dispatch({ type: 'CHANGE_PIN_START' })\n    account\n      .changePin({ pin })\n      .then(() => dispatch({ type: 'CHANGE_PIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_PIN_ERROR', error }))\n  }\n\n  return { ...state, changePin }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ChangeRecoveryStart = {| type: 'CHANGE_RECOVERY_START' |}\ntype ChangeRecoverySuccess = {| type: 'CHANGE_RECOVERY_SUCCESS' |}\ntype ChangeRecoveryError = {| error: Error, type: 'CHANGE_RECOVERY_ERROR' |}\n\ntype Action = ChangeRecoveryStart | ChangeRecoverySuccess | ChangeRecoveryError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_RECOVERY_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHANGE_RECOVERY_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CHANGE_RECOVERY_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useChangeRecovery = (account: ?EdgeAccount, questions: Array<string>, answers: Array<string>) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const changeRecovery = () => {\n    if (!account || !account.loggedIn || !questions || !answers) return\n    dispatch({ type: 'CHANGE_RECOVERY_START' })\n    account\n      .changeRecovery(questions, answers)\n      .then(() => dispatch({ type: 'CHANGE_RECOVERY_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_RECOVERY_ERROR', error }))\n  }\n\n  return { ...state, changeRecovery }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeWalletStates } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ChangeStatesStart = {| type: 'CHANGE_STATES_START' |}\ntype ChangeStatesSuccess = {| type: 'CHANGE_STATES_SUCCESS' |}\ntype ChangeStatesError = {| error: Error, type: 'CHANGE_STATES_ERROR' |}\ntype Action = ChangeStatesStart | ChangeStatesSuccess | ChangeStatesError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHANGE_STATES_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHANGE_STATES_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CHANGE_STATES_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useChangeWalletStates = (account: ?EdgeAccount, walletStates: EdgeWalletStates) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const activateWallet = () => {\n    if (!account || !account.loggedIn || !walletStates) return\n    dispatch({ type: 'CHANGE_STATES_START' })\n    account\n      .changeWalletStates(walletStates)\n      .then(() => dispatch({ type: 'CHANGE_STATES_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CHANGE_STATES_ERROR', error }))\n  }\n\n  return { ...state, activateWallet }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CheckPasswordStart = {| type: 'CHECK_PASSWORD_START' |}\ntype CheckPasswordSuccess = {| passwordVerified: boolean, type: 'CHECK_PASSWORD_SUCCESS' |}\ntype CheckPasswordError = {| error: Error, type: 'CHECK_PASSWORD_ERROR' |}\n\ntype Action = CheckPasswordStart | CheckPasswordSuccess | CheckPasswordError\n\ntype State = {| error: Error | null, passwordVerified: boolean | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, passwordVerified: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHECK_PASSWORD_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CHECK_PASSWORD_SUCCESS': {\n      return { ...state, pending: false, passwordVerified: action.passwordVerified }\n    }\n    case 'CHECK_PASSWORD_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCheckPassword = (account: ?EdgeAccount, password: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const checkPassword = () => {\n    if (!account || !account.loggedIn || !password) return\n    dispatch({ type: 'CHECK_PASSWORD_START' })\n    account\n      .checkPassword(password)\n      .then((passwordVerified: boolean) => dispatch({ type: 'CHECK_PASSWORD_SUCCESS', passwordVerified }))\n      .catch((error: Error) => dispatch({ type: 'CHECK_PASSWORD_ERROR', error }))\n  }\n\n  return { ...state, checkPassword }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CheckPinStart = {| type: 'CHECK_PIN_START' |}\ntype CheckPinSuccess = {| pinVerified: boolean, type: 'CHECK_PIN_SUCCESS' |}\ntype CheckPinError = {| error: Error, type: 'CHECK_PIN_ERROR' |}\n\ntype Action = CheckPinStart | CheckPinSuccess | CheckPinError\n\ntype State = {| error: Error | null, pending: boolean, pinVerified: boolean | null |}\n\nconst initialState: State = { error: null, pending: false, pinVerified: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHECK_PIN_START': {\n      return { ...state, pending: true, error: null, pinVerified: null }\n    }\n    case 'CHECK_PIN_SUCCESS': {\n      return { ...state, pending: false, pinVerified: true }\n    }\n    case 'CHECK_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCheckPin = (account: ?EdgeAccount, pin: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const checkPin = () => {\n    if (!account || !account.loggedIn || !pin) return\n    dispatch({ type: 'CHECK_PIN_START' })\n    account\n      .checkPin(pin)\n      .then((pinVerified: boolean) => dispatch({ type: 'CHECK_PIN_SUCCESS', pinVerified }))\n      .catch((error: Error) => dispatch({ type: 'CHECK_PIN_ERROR', error }))\n  }\n\n  return { ...state, checkPin }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CheckPinLoginEnabledStart = {| type: 'CHECK_PIN_LOGIN_ENABLED_START' |}\ntype CheckPinLoginEnabledSuccess = {| pinLoginEnabled: boolean, type: 'CHECK_PIN_LOGIN_ENABLED_SUCCESS' |}\ntype CheckPinLoginEnabledError = {| error: Error, type: 'CHECK_PIN_LOGIN_ENABLED_ERROR' |}\n\ntype Action = CheckPinLoginEnabledStart | CheckPinLoginEnabledSuccess | CheckPinLoginEnabledError\n\ntype State = {| error: Error | null, pending: boolean, pinLoginEnabled: boolean | null |}\n\nconst initialState: State = { pending: false, error: null, pinLoginEnabled: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHECK_PIN_LOGIN_ENABLED_START': {\n      return { ...state, pending: true, error: null, pinLoginEnabled: null }\n    }\n    case 'CHECK_PIN_LOGIN_ENABLED_SUCCESS': {\n      return { ...state, pending: false, pinLoginEnabled: action.pinLoginEnabled }\n    }\n    case 'CHECK_PIN_LOGIN_ENABLED_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCheckPinLoginEnabled = (context: ?EdgeContext, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const checkPinLoginEnabled = () => {\n    if (!context || !username) return\n    dispatch({ type: 'CHECK_PIN_LOGIN_ENABLED_START' })\n    context\n      .pinLoginEnabled(username)\n      .then((pinLoginEnabled: boolean) => dispatch({ type: 'CHECK_PIN_LOGIN_ENABLED_SUCCESS', pinLoginEnabled }))\n      .catch((error: Error) => dispatch({ type: 'CHECK_PIN_LOGIN_ENABLED_ERROR', error }))\n  }\n\n  return { ...state, checkPinLoginEnabled }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CheckUsernameAvailabilityStart = {| type: 'CHECK_USERNAME_AVAILABILITY_START' |}\ntype CheckUsernameAvailabilitySuccess = {| type: 'CHECK_USERNAME_AVAILABILITY_SUCCESS', usernameAvailability: boolean |}\ntype CheckUsernameAvailabilityError = {| error: Error, type: 'CHECK_USERNAME_AVAILABILITY_ERROR' |}\n\ntype Action = CheckUsernameAvailabilityStart | CheckUsernameAvailabilitySuccess | CheckUsernameAvailabilityError\n\ntype State = {| error: Error | null, pending: boolean, usernameAvailability: boolean | null |}\n\nconst initialState: State = { pending: false, error: null, usernameAvailability: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CHECK_USERNAME_AVAILABILITY_START': {\n      return { ...state, pending: true, error: null, usernameAvailability: null }\n    }\n    case 'CHECK_USERNAME_AVAILABILITY_SUCCESS': {\n      return { ...state, pending: false, usernameAvailability: action.usernameAvailability }\n    }\n    case 'CHECK_USERNAME_AVAILABILITY_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCheckUsernameAvailability = (context: ?EdgeContext, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const checkUsernameAvailability = () => {\n    if (!context || !username) return\n    dispatch({ type: 'CHECK_USERNAME_AVAILABILITY_START' })\n    context\n      .usernameAvailable(username)\n      .then((usernameAvailability: boolean) =>\n        dispatch({ type: 'CHECK_USERNAME_AVAILABILITY_SUCCESS', usernameAvailability })\n      )\n      .catch((error: Error) => dispatch({ type: 'CHECK_USERNAME_AVAILABILITY_ERROR', error }))\n  }\n\n  return { ...state, checkUsernameAvailability }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ConvertCurrencyStart = {| type: 'CONVERT_CURRENCY_START' |}\ntype ConvertCurrencySuccess = {| amount: number, type: 'CONVERT_CURRENCY_SUCCESS' |}\ntype ConvertCurrencyError = {| error: Error, type: 'CONVERT_CURRENCY_ERROR' |}\ntype Action = ConvertCurrencyStart | ConvertCurrencySuccess | ConvertCurrencyError\n\ntype State = {| amount: number | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { amount: null, pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CONVERT_CURRENCY_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CONVERT_CURRENCY_SUCCESS': {\n      return { ...state, pending: false, amount: action.amount }\n    }\n    case 'CONVERT_CURRENCY_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useConvertCurrency = (\n  account: ?EdgeAccount,\n  fromCurrency: ?string,\n  toCurrency: ?string,\n  amount: ?number\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!account || !account.loggedIn || !account.rateCache || !fromCurrency || !toCurrency || !amount) return // mount with null\n    dispatch({ type: 'CONVERT_CURRENCY_START' })\n    account.rateCache\n      .convertCurrency(fromCurrency, toCurrency, amount)\n      .then((amount: number) => dispatch({ type: 'CONVERT_CURRENCY_SUCCESS', amount }))\n      .catch((error: Error) => dispatch({ type: 'CONVERT_CURRENCY_ERROR', error })) // mount with account / null -> accoun / accounA -> accounB\n\n    const unsubscribe = account.rateCache.on('update', () => {\n      if (!account || !account.loggedIn || !account.rateCache || !fromCurrency || !toCurrency || !amount) return\n      account.rateCache\n        .convertCurrency(fromCurrency, toCurrency, amount)\n        .then((amount: number) => dispatch({ type: 'CONVERT_CURRENCY_SUCCESS', amount }))\n        .catch((error: Error) => dispatch({ type: 'CONVERT_CURRENCY_ERROR', error }))\n    })\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, [account, fromCurrency, toCurrency, amount])\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CreateAccountStart = {| type: 'CREATE_ACCOUNT_START' |}\ntype CreateAccountSuccess = {| account: EdgeAccount, type: 'CREATE_ACCOUNT_SUCCESS' |}\ntype CreateAccountError = {| error: Error, type: 'CREATE_ACCOUNT_ERROR' |}\ntype Action = CreateAccountStart | CreateAccountSuccess | CreateAccountError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CREATE_ACCOUNT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CREATE_ACCOUNT_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'CREATE_ACCOUNT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCreateAccount = (\n  context: ?EdgeContext,\n  username: ?string,\n  password: ?string,\n  pin: ?string,\n  options: ?EdgeAccountOptions = {}\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const createAccount = () => {\n    if (!context || !username) return\n    dispatch({ type: 'CREATE_ACCOUNT_START' })\n    context\n      .createAccount(username, password || undefined, pin || undefined, options || undefined)\n      .then((account: EdgeAccount) => dispatch({ type: 'CREATE_ACCOUNT_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'CREATE_ACCOUNT_ERROR', error }))\n  }\n\n  return { ...state, createAccount }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCreateCurrencyWalletOptions } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CreateCurrencyWalletStart = {| type: 'CREATE_CURRENCY_WALLET_START' |}\ntype CreateCurrencyWalletSuccess = {| type: 'CREATE_CURRENCY_WALLET_SUCCESS' |}\ntype CreateCurrencyWalletError = {| error: Error, type: 'CREATE_CURRENCY_WALLET_ERROR' |}\n\ntype Action = CreateCurrencyWalletStart | CreateCurrencyWalletSuccess | CreateCurrencyWalletError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CREATE_CURRENCY_WALLET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CREATE_CURRENCY_WALLET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CREATE_CURRENCY_WALLET_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCreateCurrencyWallet = (\n  account: ?EdgeAccount,\n  type: string,\n  options: ?EdgeCreateCurrencyWalletOptions\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const createCurrencyWallet = () => {\n    if (!account || !account.loggedIn || !type) return\n    dispatch({ type: 'CREATE_CURRENCY_WALLET_START' })\n    account\n      .createCurrencyWallet(type, options || undefined)\n      .then(() => dispatch({ type: 'CREATE_CURRENCY_WALLET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CREATE_CURRENCY_WALLET_ERROR', error }))\n  }\n\n  return { ...state, createCurrencyWallet }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype CreateWalletStart = {| type: 'CREATE_WALLET_START' |}\ntype CreateWalletSuccess = {| type: 'CREATE_WALLET_SUCCESS' |}\ntype CreateWalletError = {| error: Error, type: 'CREATE_WALLET_ERROR' |}\n\ntype Action = CreateWalletStart | CreateWalletSuccess | CreateWalletError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'CREATE_WALLET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'CREATE_WALLET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'CREATE_WALLET_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useCreateWallet = (account: ?EdgeAccount, type: ?string, keys: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const createWallet = () => {\n    if (!account || !account.loggedIn || !type || !keys) return\n    dispatch({ type: 'CREATE_WALLET_START' })\n    account\n      .createWallet(type, keys)\n      .then(() => dispatch({ type: 'CREATE_WALLET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'CREATE_WALLET_ERROR', error }))\n  }\n\n  return { ...state, createWallet }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeDataDump } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ReadDataDumpStart = {| type: 'READ_DATA_DUMP_START' |}\ntype ReadDataDumpSuccess = {| dataDump: EdgeDataDump, type: 'READ_DATA_DUMP_SUCCESS' |}\ntype ReadDataDumpError = {| error: Error, type: 'READ_DATA_DUMP_ERROR' |}\ntype Action = ReadDataDumpStart | ReadDataDumpSuccess | ReadDataDumpError\n\ntype State = {| dataDump: EdgeDataDump | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { dataDump: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_DATA_DUMP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_DATA_DUMP_SUCCESS': {\n      return { ...state, pending: false, dataDump: action.dataDump }\n    }\n    case 'READ_DATA_DUMP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDataDump = (wallet: ?EdgeCurrencyWallet) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getDataDump = () => {\n    if (!wallet) return\n    dispatch({ type: 'READ_DATA_DUMP_START' })\n    wallet\n      .dumpData()\n      .then((dataDump: EdgeDataDump) => dispatch({ type: 'READ_DATA_DUMP_SUCCESS', dataDump }))\n      .catch((error: Error) => dispatch({ type: 'READ_DATA_DUMP_ERROR', error }))\n  }\n\n  return { ...state, getDataDump }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeleteLocalUserStart = {| type: 'DELETE_LOCAL_USER_START' |}\ntype DeleteLocalUserSuccess = {| type: 'DELETE_LOCAL_USER_SUCCESS' |}\ntype DeleteLocalUserError = {| error: Error, type: 'DELETE_LOCAL_USER_ERROR' |}\n\ntype Action = DeleteLocalUserStart | DeleteLocalUserSuccess | DeleteLocalUserError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_LOCAL_USER_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_LOCAL_USER_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_LOCAL_USER_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeleteLocalUser = (context: ?EdgeContext, username: string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deleteLocalUser = () => {\n    if (!context || !username) return\n    dispatch({ type: 'DELETE_LOCAL_USER_START' })\n    context\n      .deleteLocalAccount(username)\n      .then(() => dispatch({ type: 'DELETE_LOCAL_USER_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_LOCAL_USER_ERROR', error }))\n  }\n\n  return { ...state, deleteLocalUser }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeletePasswordStart = {| type: 'DELETE_PASSWORD_START' |}\ntype DeletePasswordSuccess = {| type: 'DELETE_PASSWORD_SUCCESS' |}\ntype DeletePasswordError = {| error: Error, type: 'DELETE_PASSWORD_ERROR' |}\n\ntype Action = DeletePasswordStart | DeletePasswordSuccess | DeletePasswordError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_PASSWORD_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_PASSWORD_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_PASSWORD_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeletePassword = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deletePassword = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DELETE_PASSWORD_START' })\n    account\n      .deletePassword()\n      .then(() => dispatch({ type: 'DELETE_PASSWORD_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_PASSWORD_ERROR', error }))\n  }\n\n  return { ...state, deletePassword }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeletePinStart = {| type: 'DELETE_PIN_START' |}\ntype DeletePinSuccess = {| type: 'DELETE_PIN_SUCCESS' |}\ntype DeletePinError = {| error: Error, type: 'DELETE_PIN_ERROR' |}\n\ntype Action = DeletePinStart | DeletePinSuccess | DeletePinError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_PIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_PIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_PIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeletePin = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deletePin = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DELETE_PIN_START' })\n    account\n      .deletePin()\n      .then(() => dispatch({ type: 'DELETE_PIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_PIN_ERROR', error }))\n  }\n\n  return { ...state, deletePin }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeleteRecoveryStart = {| type: 'DELETE_RECOVERY_START' |}\ntype DeleteRecoverySuccess = {| type: 'DELETE_RECOVERY_SUCCESS' |}\ntype DeleteRecoveryError = {| error: Error, type: 'DELETE_RECOVERY_ERROR' |}\n\ntype Action = DeleteRecoveryStart | DeleteRecoverySuccess | DeleteRecoveryError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_RECOVERY_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_RECOVERY_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_RECOVERY_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeleteRecovery = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deleteRecovery = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DELETE_RECOVERY_START' })\n    account\n      .deleteRecovery()\n      .then(() => dispatch({ type: 'DELETE_RECOVERY_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_RECOVERY_ERROR', error }))\n  }\n\n  return { ...state, deleteRecovery }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DeleteWalletStart = {| type: 'DELETE_WALLET_START' |}\ntype DeleteWalletSuccess = {| type: 'DELETE_WALLET_SUCCESS' |}\ntype DeleteWalletError = {| error: Error, type: 'DELETE_WALLET_ERROR' |}\ntype Action = DeleteWalletStart | DeleteWalletSuccess | DeleteWalletError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DELETE_WALLET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DELETE_WALLET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DELETE_WALLET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDeleteWallet = (account: ?EdgeAccount, walletId: string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const deleteWallet = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DELETE_WALLET_START' })\n    account\n      .changeWalletStates({ [walletId]: { deleted: true } })\n      .then(() => dispatch({ type: 'DELETE_WALLET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DELETE_WALLET_ERROR', error }))\n  }\n\n  return { ...state, deleteWallet }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisableOtpStart = {| type: 'DISABLE_OTP_START' |}\ntype DisableOtpSuccess = {| type: 'DISABLE_OTP_SUCCESS' |}\ntype DisableOtpError = {| error: Error, type: 'DISABLE_OTP_ERROR' |}\n\ntype Action = DisableOtpStart | DisableOtpSuccess | DisableOtpError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_OTP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_OTP_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_OTP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisableOtp = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disableOtp = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DISABLE_OTP_START' })\n    account\n      .disableOtp()\n      .then(() => dispatch({ type: 'DISABLE_OTP_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_OTP_ERROR', error }))\n  }\n\n  return { ...state, disableOtp }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisablePinLoginStart = {| type: 'DISABLE_PIN_LOGIN_START' |}\ntype DisablePinLoginSuccess = {| type: 'DISABLE_PIN_LOGIN_SUCCESS' |}\ntype DisablePinLoginError = {| error: Error, type: 'DISABLE_PIN_LOGIN_ERROR' |}\n\ntype Action = DisablePinLoginStart | DisablePinLoginSuccess | DisablePinLoginError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_PIN_LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_PIN_LOGIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_PIN_LOGIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisablePinLogin = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disablePinLogin = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'DISABLE_PIN_LOGIN_START' })\n    account\n      .changePin({ enableLogin: false })\n      .then(() => dispatch({ type: 'DISABLE_PIN_LOGIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_PIN_LOGIN_ERROR', error }))\n  }\n\n  return { ...state, disablePinLogin }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype DisableTokensStart = {| type: 'DISABLE_TOKENS_START' |}\ntype DisableTokensSuccess = {| type: 'DISABLE_TOKENS_SUCCESS' |}\ntype DisableTokensError = {| error: Error, type: 'DISABLE_TOKENS_ERROR' |}\n\ntype Action = DisableTokensStart | DisableTokensSuccess | DisableTokensError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'DISABLE_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'DISABLE_TOKENS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'DISABLE_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useDisableTokens = (wallet: ?EdgeCurrencyWallet, tokens: ?Array<string>) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const disableTokens = () => {\n    if (!wallet || !tokens) return\n    dispatch({ type: 'DISABLE_TOKENS_START' })\n    wallet\n      .disableTokens(tokens)\n      .then(() => dispatch({ type: 'DISABLE_TOKENS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'DISABLE_TOKENS_ERROR', error }))\n  }\n\n  return { ...state, disableTokens }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useEffect } from 'react'\n\nimport { useForceUpdate } from './useForceUpdate.js'\n\nexport const useEdgeAccount = (account: ?EdgeAccount, properties: Array<$Keys<EdgeAccount>>) => {\n  const forceUpdate = useForceUpdate()\n\n  const effect = () => {\n    const unsubscribes = properties.map(property => (account ? account.watch(property, forceUpdate) : () => null))\n    const unsubscribe = () => unsubscribes.forEach(fn => fn())\n    return unsubscribe // unmount with account / accountA -> accountB (1) / account -> null\n  }\n\n  useEffect(effect, [account])\n\n  return void 0\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useEffect } from 'react'\n\nimport { useForceUpdate } from './useForceUpdate.js'\n\nexport const useEdgeContext = (context: ?EdgeContext, properties: Array<$Keys<EdgeContext>> = []) => {\n  const forceUpdate = useForceUpdate()\n\n  const effect = () => {\n    const unsubscribes = properties.map(key => (context ? context.watch(key, forceUpdate) : () => null))\n    const unsubscribe = () => unsubscribes.forEach(fn => fn())\n    return unsubscribe // unmount with context / contextA -> contextB (1) / context -> null\n  }\n\n  useEffect(effect, [context])\n\n  return void 0\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect } from 'react'\n\nimport { useForceUpdate } from './useForceUpdate.js'\n\nexport const useEdgeCurrencyWallet = (\n  wallet: ?EdgeCurrencyWallet,\n  properties: Array<$Keys<EdgeCurrencyWallet>> = []\n) => {\n  const forceUpdate = useForceUpdate()\n\n  const effect = () => {\n    const unsubscribes = properties.map(property => (wallet ? wallet.watch(property, forceUpdate) : () => null))\n    const unsubscribe = () => unsubscribes.forEach(fn => fn())\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, [wallet])\n\n  return void 0\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadEnabledTokensStart = {| type: 'READ_ENABLED_TOKENS_START' |}\ntype ReadEnabledTokensSuccess = {| enabledTokens: Array<string>, type: 'READ_ENABLED_TOKENS_SUCCESS' |}\ntype ReadEnabledTokensError = {| error: Error, type: 'READ_ENABLED_TOKENS_ERROR' |}\n\ntype Action = ReadEnabledTokensStart | ReadEnabledTokensSuccess | ReadEnabledTokensError\n\ntype State = {| enabledTokens: Array<string> | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { enabledTokens: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_ENABLED_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_ENABLED_TOKENS_SUCCESS': {\n      return { ...state, pending: false, enabledTokens: action.enabledTokens }\n    }\n    case 'READ_ENABLED_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnabledTokens = (wallet: ?EdgeCurrencyWallet) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_ENABLED_TOKENS_START' })\n    wallet\n      .getEnabledTokens()\n      .then((enabledTokens: Array<string>) => dispatch({ type: 'READ_ENABLED_TOKENS_SUCCESS', enabledTokens }))\n      .catch((error: Error) => dispatch({ type: 'READ_ENABLED_TOKENS_ERROR', error }))\n  }\n\n  useEffect(effect, [wallet])\n\n  return state\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnableOtpStart = {| type: 'ENABLE_OTP_START' |}\ntype EnableOtpSuccess = {| type: 'ENABLE_OTP_SUCCESS' |}\ntype EnableOtpError = {| error: Error, type: 'ENABLE_OTP_ERROR' |}\n\ntype Action = EnableOtpStart | EnableOtpSuccess | EnableOtpError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_OTP_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_OTP_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_OTP_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnableOtp = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enableOtp = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'ENABLE_OTP_START' })\n    account\n      .enableOtp()\n      .then(() => dispatch({ type: 'ENABLE_OTP_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_OTP_ERROR', error }))\n  }\n\n  return { ...state, enableOtp }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnablePinLoginStart = {| type: 'ENABLE_PIN_LOGIN_START' |}\ntype EnablePinLoginSuccess = {| type: 'ENABLE_PIN_LOGIN_SUCCESS' |}\ntype EnablePinLoginError = {| error: Error, type: 'ENABLE_PIN_LOGIN_ERROR' |}\n\ntype Action = EnablePinLoginStart | EnablePinLoginSuccess | EnablePinLoginError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_PIN_LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_PIN_LOGIN_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_PIN_LOGIN_ERROR': {\n      return { ...state, pending: true, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnablePinLogin = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enablePinLogin = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'ENABLE_PIN_LOGIN_START' })\n    account\n      .changePin({ enableLogin: true })\n      .then(() => dispatch({ type: 'ENABLE_PIN_LOGIN_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_PIN_LOGIN_ERROR', error }))\n  }\n\n  return { ...state, enablePinLogin }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EnableTokensStart = {| type: 'ENABLE_TOKENS_START' |}\ntype EnableTokensSuccess = {| type: 'ENABLE_TOKENS_SUCCESS' |}\ntype EnableTokensError = {| error: Error, type: 'ENABLE_TOKENS_ERROR' |}\n\ntype Action = EnableTokensStart | EnableTokensSuccess | EnableTokensError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENABLE_TOKENS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENABLE_TOKENS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'ENABLE_TOKENS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEnableTokens = (wallet: ?EdgeCurrencyWallet, tokens: ?Array<string>) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const enableTokens = () => {\n    if (!wallet || !tokens) return\n    dispatch({ type: 'ENABLE_TOKENS_START' })\n    wallet\n      .enableTokens(tokens)\n      .then(() => dispatch({ type: 'ENABLE_TOKENS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'ENABLE_TOKENS_ERROR', error }))\n  }\n\n  return { ...state, enableTokens }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeEncodeUri } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype EncodeUriStart = {| type: 'ENCODE_URI_START' |}\ntype EncodeUriSuccess = {| type: 'ENCODE_URI_SUCCESS', uri: string |}\ntype EncodeUriError = {| error: Error, type: 'ENCODE_URI_ERROR' |}\ntype Action = EncodeUriStart | EncodeUriSuccess | EncodeUriError\n\ntype State = {| error: Error | null, pending: boolean, uri: string | null |}\n\nconst initialState: State = { pending: false, error: null, uri: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'ENCODE_URI_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'ENCODE_URI_SUCCESS': {\n      return { ...state, pending: false, uri: action.uri }\n    }\n    case 'ENCODE_URI_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useEncodeUri = (wallet: ?EdgeCurrencyWallet, uri: ?EdgeEncodeUri) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const encodeUri = () => {\n    if (!wallet || !uri) return // mount with null\n    dispatch({ type: 'ENCODE_URI_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .encodeUri(uri)\n      .then((uri: string) => dispatch({ type: 'ENCODE_URI_SUCCESS', uri }))\n      .catch((error: Error) => dispatch({ type: 'ENCODE_URI_ERROR', error }))\n  }\n\n  return { ...state, encodeUri }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeGetTransactionsOptions } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ExportStart = {| type: 'EXPORT_START' |}\ntype ExportSuccess = {| csv: string, type: 'EXPORT_SUCCESS' |}\ntype ExportError = {| error: Error, type: 'EXPORT_ERROR' |}\ntype Action = ExportStart | ExportSuccess | ExportError\n\ntype State = {| csv: string | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, csv: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'EXPORT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'EXPORT_SUCCESS': {\n      return { ...state, pending: false, csv: action.csv }\n    }\n    case 'EXPORT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useExportToCsv = (wallet: ?EdgeCurrencyWallet, options: ?EdgeGetTransactionsOptions) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const exportToCsv = () => {\n    if (!wallet || !options) return // mount with null\n    dispatch({ type: 'EXPORT_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .exportTransactionsToCSV(options)\n      .then((csv: string) => dispatch({ type: 'EXPORT_SUCCESS', csv }))\n      .catch((error: Error) => dispatch({ type: 'EXPORT_ERROR', error }))\n  }\n\n  return { ...state, exportToCsv }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeGetTransactionsOptions } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ExportStart = {| type: 'EXPORT_START' |}\ntype ExportSuccess = {| qbo: string, type: 'EXPORT_SUCCESS' |}\ntype ExportError = {| error: Error, type: 'EXPORT_ERROR' |}\ntype Action = ExportStart | ExportSuccess | ExportError\n\ntype State = {| error: Error | null, pending: boolean, qbo: string | null |}\n\nconst initialState: State = { pending: false, error: null, qbo: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'EXPORT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'EXPORT_SUCCESS': {\n      return { ...state, pending: false, qbo: action.qbo }\n    }\n    case 'EXPORT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useExportToQbo = (wallet: ?EdgeCurrencyWallet, options: ?EdgeGetTransactionsOptions) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const exportToQbo = () => {\n    if (!wallet || !options) return // mount with null\n    dispatch({ type: 'EXPORT_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .exportTransactionsToQBO(options)\n      .then((qbo: string) => dispatch({ type: 'EXPORT_SUCCESS', qbo }))\n      .catch((error: Error) => dispatch({ type: 'EXPORT_ERROR', error }))\n  }\n\n  return { ...state, exportToQbo }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeLobby } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype FetchLobbyStart = {| type: 'FETCH_LOBBY_START' |}\ntype FetchLobbySuccess = {| lobby: EdgeLobby, type: 'FETCH_LOBBY_SUCCESS' |}\ntype FetchLobbyError = {| error: Error, type: 'FETCH_LOBBY_ERROR' |}\n\ntype Action = FetchLobbyStart | FetchLobbySuccess | FetchLobbyError\n\ntype State = {| error: Error | null, lobby: EdgeLobby | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, lobby: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'FETCH_LOBBY_START': {\n      return { ...state, pending: true, error: null, lobby: null }\n    }\n    case 'FETCH_LOBBY_SUCCESS': {\n      return { ...state, pending: false, lobby: action.lobby }\n    }\n    case 'FETCH_LOBBY_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useFetchLobby = (account: ?EdgeAccount, lobbyId: string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const fetchLobby = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'FETCH_LOBBY_START' })\n    account\n      .fetchLobby(lobbyId)\n      .then((lobby: EdgeLobby) => dispatch({ type: 'FETCH_LOBBY_SUCCESS', lobby }))\n      .catch((error: Error) => dispatch({ type: 'FETCH_LOBBY_ERROR', error }))\n  }\n\n  return { ...state, fetchLobby }\n}\n","// @flow\n\nimport { type EdgeContext, type EdgeLoginMessages } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype FetchLoginMessagesStart = {| type: 'FETCH_LOGIN_MESSAGES_START' |}\ntype FetchLoginMessagesSuccess = {| loginMessages: EdgeLoginMessages, type: 'FETCH_LOGIN_MESSAGES_SUCCESS' |}\ntype FetchLoginMessagesError = {| error: Error, type: 'FETCH_LOGIN_MESSAGES_ERROR' |}\n\ntype Action = FetchLoginMessagesStart | FetchLoginMessagesSuccess | FetchLoginMessagesError\n\ntype State = {| error: Error | null, loginMessages: EdgeLoginMessages | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, loginMessages: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'FETCH_LOGIN_MESSAGES_START': {\n      return { ...state, pending: true, error: null, loginMessages: null }\n    }\n    case 'FETCH_LOGIN_MESSAGES_SUCCESS': {\n      return { ...state, pending: false, loginMessages: action.loginMessages }\n    }\n    case 'FETCH_LOGIN_MESSAGES_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useFetchLoginMessages = (context: ?EdgeContext) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const fetchLoginMessages = () => {\n    if (!context) return\n    dispatch({ type: 'FETCH_LOGIN_MESSAGES_START' })\n    context\n      .fetchLoginMessages()\n      .then((loginMessages: EdgeLoginMessages) => dispatch({ type: 'FETCH_LOGIN_MESSAGES_SUCCESS', loginMessages }))\n      .catch((error: Error) => dispatch({ type: 'FETCH_LOGIN_MESSAGES_ERROR', error }))\n  }\n\n  return { ...state, fetchLoginMessages }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype FetchRecovery2QuestionsStart = {| type: 'FETCH_RECOVERY_2_QUESTIONS_START' |}\ntype FetchRecovery2QuestionsSuccess = {|\n  recovery2Questions: Array<string>,\n  type: 'FETCH_RECOVERY_2_QUESTIONS_SUCCESS'\n|}\ntype FetchRecovery2QuestionsError = {| error: Error, type: 'FETCH_RECOVERY_2_QUESTIONS_ERROR' |}\n\ntype Action = FetchRecovery2QuestionsStart | FetchRecovery2QuestionsSuccess | FetchRecovery2QuestionsError\n\ntype State = {| error: Error | null, pending: boolean, recovery2Questions: Array<string> | null |}\n\nconst initialState: State = { pending: false, error: null, recovery2Questions: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'FETCH_RECOVERY_2_QUESTIONS_START': {\n      return { ...state, pending: true, error: null, recovery2Questions: null }\n    }\n    case 'FETCH_RECOVERY_2_QUESTIONS_SUCCESS': {\n      return { ...state, pending: false, recovery2Questions: action.recovery2Questions }\n    }\n    case 'FETCH_RECOVERY_2_QUESTIONS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useFetchRecovery2Questions = (context: ?EdgeContext, recovery2Key: ?string, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const fetchRecovery2Questions = () => {\n    if (!context || !recovery2Key || !username) return\n    dispatch({ type: 'FETCH_RECOVERY_2_QUESTIONS_START' })\n    context\n      .fetchRecovery2Questions(recovery2Key, username)\n      .then(recovery2Questions => dispatch({ type: 'FETCH_RECOVERY_2_QUESTIONS_SUCCESS', recovery2Questions }))\n      .catch((error: Error) => dispatch({ type: 'FETCH_RECOVERY_2_QUESTIONS_ERROR', error }))\n  }\n\n  return { ...state, fetchRecovery2Questions }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype FixUsernameStart = {| type: 'FIX_USERNAME_START' |}\ntype FixUsernameSuccess = {| type: 'FIX_USERNAME_SUCCESS', username: string |}\ntype FixUsernameError = {| error: Error, type: 'FIX_USERNAME_ERROR' |}\n\ntype Action = FixUsernameStart | FixUsernameSuccess | FixUsernameError\n\ntype State = {| error: Error | null, pending: boolean, username: string | null |}\n\nconst initialState: State = { pending: false, error: null, username: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'FIX_USERNAME_START': {\n      return { ...state, pending: true, error: null, username: null }\n    }\n    case 'FIX_USERNAME_SUCCESS': {\n      return { ...state, pending: false, username: action.username }\n    }\n    case 'FIX_USERNAME_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useFixUsername = (context: ?EdgeContext, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const fixUsername = () => {\n    if (!context || !username) return\n    dispatch({ type: 'FIX_USERNAME_START' })\n    Promise.resolve(context.fixUsername(username))\n      .then((username: string) => dispatch({ type: 'FIX_USERNAME_SUCCESS', username }))\n      .catch((error: Error) => dispatch({ type: 'FIX_USERNAME_ERROR', error }))\n  }\n\n  return { ...state, fixUsername }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgePaymentProtocolInfo } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype GetPaymentProtocolInfoStart = {| type: 'GET_PAYMENT_PROTOCOL_INFO_START' |}\ntype GetPaymentProtocolInfoSuccess = {|\n  paymentProtocolInfo: EdgePaymentProtocolInfo,\n  type: 'GET_PAYMENT_PROTOCOL_INFO_SUCCESS'\n|}\ntype GetPaymentProtocolInfoError = {| error: Error, type: 'GET_PAYMENT_PROTOCOL_INFO_ERROR' |}\ntype Action = GetPaymentProtocolInfoStart | GetPaymentProtocolInfoSuccess | GetPaymentProtocolInfoError\ntype State = {| error: Error | null, paymentProtocolInfo: EdgePaymentProtocolInfo | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, paymentProtocolInfo: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'GET_PAYMENT_PROTOCOL_INFO_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'GET_PAYMENT_PROTOCOL_INFO_SUCCESS': {\n      return { ...state, pending: false, paymentProtocolInfo: action.paymentProtocolInfo }\n    }\n    case 'GET_PAYMENT_PROTOCOL_INFO_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useGetPaymentProtocolInfo = (wallet: ?EdgeCurrencyWallet, paymentProtocolUrl: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getPaymentProtocolInfo = () => {\n    if (!wallet || !paymentProtocolUrl) return\n    dispatch({ type: 'GET_PAYMENT_PROTOCOL_INFO_START' })\n    wallet\n      .getPaymentProtocolInfo(paymentProtocolUrl)\n      .then((paymentProtocolInfo: EdgePaymentProtocolInfo) =>\n        dispatch({ type: 'GET_PAYMENT_PROTOCOL_INFO_SUCCESS', paymentProtocolInfo })\n      )\n      .catch((error: Error) => dispatch({ type: 'GET_PAYMENT_PROTOCOL_INFO_ERROR', error }))\n  }\n\n  return { ...state, getPaymentProtocolInfo }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype GetRecovery2KeyStart = {| type: 'GET_RECOVERY_2_KEY_START' |}\ntype GetRecovery2KeySuccess = {| recovery2Key: string, type: 'GET_RECOVERY_2_KEY_SUCCESS' |}\ntype GetRecovery2KeyError = {| error: Error, type: 'GET_RECOVERY_2_KEY_ERROR' |}\n\ntype Action = GetRecovery2KeyStart | GetRecovery2KeySuccess | GetRecovery2KeyError\n\ntype State = {| error: Error | null, pending: boolean, recovery2Key: string | null |}\n\nconst initialState: State = { pending: false, error: null, recovery2Key: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'GET_RECOVERY_2_KEY_START': {\n      return { ...state, pending: true, error: null, recovery2Key: null }\n    }\n    case 'GET_RECOVERY_2_KEY_SUCCESS': {\n      return { ...state, pending: false, recovery2Key: action.recovery2Key }\n    }\n    case 'GET_RECOVERY_2_KEY_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useGetRecovery2Key = (context: ?EdgeContext, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getRecovery2Key = () => {\n    if (!context || !username) return\n    dispatch({ type: 'GET_RECOVERY_2_KEY_START' })\n    context\n      .getRecovery2Key(username)\n      .then((recovery2Key: string) => dispatch({ type: 'GET_RECOVERY_2_KEY_SUCCESS', recovery2Key }))\n      .catch((error: Error) => dispatch({ type: 'GET_RECOVERY_2_KEY_ERROR', error }))\n  }\n\n  return { ...state, getRecovery2Key }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ListRecoveryQuestionChoicesStart = {| type: 'GET_RECOVERY_QUESTIONS_CHOICES_START' |}\ntype ListRecoveryQuestionChoicesSuccess = {|\n  recoveryQuestionChoices: Array<string>,\n  type: 'GET_RECOVERY_QUESTIONS_CHOICES_SUCCESS'\n|}\ntype ListRecoveryQuestionChoicesError = {| error: Error, type: 'GET_RECOVERY_QUESTIONS_CHOICES_ERROR' |}\n\ntype Action = ListRecoveryQuestionChoicesStart | ListRecoveryQuestionChoicesSuccess | ListRecoveryQuestionChoicesError\n\ntype State = {| error: Error | null, pending: boolean, recoveryQuestionChoices: Array<string> | null |}\n\nconst initialState: State = { pending: false, error: null, recoveryQuestionChoices: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'GET_RECOVERY_QUESTIONS_CHOICES_START': {\n      return { ...state, pending: true, error: null, recoveryQuestionChoices: null }\n    }\n    case 'GET_RECOVERY_QUESTIONS_CHOICES_SUCCESS': {\n      return { ...state, pending: false, recoveryQuestionChoices: action.recoveryQuestionChoices }\n    }\n    case 'GET_RECOVERY_QUESTIONS_CHOICES_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useListRecoveryQuestionChoices = (context: ?EdgeContext, username: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const listRecoveryQuestionChoices = () => {\n    if (!context || !username) return\n    dispatch({ type: 'GET_RECOVERY_QUESTIONS_CHOICES_START' })\n    context\n      .listRecoveryQuestionChoices()\n      .then((recoveryQuestionChoices: Array<string>) =>\n        dispatch({ type: 'GET_RECOVERY_QUESTIONS_CHOICES_SUCCESS', recoveryQuestionChoices })\n      )\n      .catch((error: Error) => dispatch({ type: 'GET_RECOVERY_QUESTIONS_CHOICES_ERROR', error }))\n  }\n\n  return { ...state, listRecoveryQuestionChoices }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ListUsernamesStart = {| type: 'READ_USERNAMES_START' |}\ntype ListUsernamesSuccess = {| type: 'READ_USERNAMES_SUCCESS', usernames: Array<string> |}\ntype ListUsernamesError = {| error: Error, type: 'READ_USERNAMES_ERROR' |}\n\ntype Action = ListUsernamesStart | ListUsernamesSuccess | ListUsernamesError\n\ntype State = {| error: Error | null, pending: boolean, usernames: Array<string> | null |}\n\nconst initialState: State = { pending: false, error: null, usernames: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_USERNAMES_START': {\n      return { ...state, pending: true, error: null, usernames: null }\n    }\n    case 'READ_USERNAMES_SUCCESS': {\n      return { ...state, pending: false, usernames: action.usernames }\n    }\n    case 'READ_USERNAMES_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useListUsernames = (context: ?EdgeContext) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const listUsernames = () => {\n    if (!context) return\n    dispatch({ type: 'READ_USERNAMES_START' })\n    context\n      .listUsernames()\n      .then((usernames: Array<string>) => dispatch({ type: 'READ_USERNAMES_SUCCESS', usernames }))\n      .catch((error: Error) => dispatch({ type: 'READ_USERNAMES_ERROR', error }))\n  }\n\n  return { ...state, listUsernames }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype ReadStart = {| type: 'READ_START' |}\ntype ReadSuccess = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype ReadError = {| error: Error, type: 'READ_ERROR' |}\ntype Action = ReadStart | ReadSuccess | ReadError\n\ntype State = {| data: Stringifyable | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { data: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_SUCCESS': {\n      return { ...state, pending: false, data: action.data }\n    }\n    case 'READ_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\ntype StorageContext = EdgeAccount | EdgeCurrencyWallet\nexport const useLocalStorageRead = (storageContext: ?StorageContext, path: ?string, initial: ?Stringifyable) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.localDisklet\n      .getText(path)\n      .catch((error: Error) => {\n        if (initial === undefined) throw error\n        const hack: any = storageContext\n        return hack.localDisklet.setText(path, JSON.stringify(initial)).then(() => hack.localDisklet.getText(path))\n      })\n      .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n      .catch((error: Error) => dispatch({ type: 'READ_ERROR', error })) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n  }\n\n  useEffect(effect, [storageContext])\n\n  return { ...state, refresh: effect }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WriteStart = {| type: 'WRITE_START' |}\ntype WriteSuccess = {| type: 'WRITE_SUCCESS' |}\ntype WriteError = {| error: Error, type: 'WRITE_ERROR' |}\n\ntype Action = WriteStart | WriteSuccess | WriteError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\ntype StorageContext = EdgeAccount | EdgeCurrencyWallet\nexport const useLocalStorageWrite = (storageContext: ?StorageContext, path: ?string, data: ?Stringifyable) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setData = () => {\n    if (!storageContext || !path || !data) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.localDisklet\n      .setText(path, JSON.stringify(data))\n      .then(() => dispatch({ type: 'WRITE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_ERROR', error }))\n  }\n\n  return { ...state, setData }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeReceiveAddress } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LockReceiveAddressStart = {| type: 'LOCK_RECEIVE_ADDRESS_START' |}\ntype LockReceiveAddressSuccess = {| type: 'LOCK_RECEIVE_ADDRESS_SUCCESS' |}\ntype LockReceiveAddressError = {| error: Error, type: 'LOCK_RECEIVE_ADDRESS_ERROR' |}\ntype Action = LockReceiveAddressStart | LockReceiveAddressSuccess | LockReceiveAddressError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOCK_RECEIVE_ADDRESS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOCK_RECEIVE_ADDRESS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'LOCK_RECEIVE_ADDRESS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLockReceiveAddress = (wallet: ?EdgeCurrencyWallet, receiveAddress: ?EdgeReceiveAddress) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const lockReceiveAddress = () => {\n    if (!wallet || !receiveAddress) return // mount with null\n    dispatch({ type: 'LOCK_RECEIVE_ADDRESS_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .lockReceiveAddress(receiveAddress)\n      .then(() => dispatch({ type: 'LOCK_RECEIVE_ADDRESS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'LOCK_RECEIVE_ADDRESS_ERROR', error }))\n  }\n\n  return { ...state, lockReceiveAddress }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LoginStart = {| type: 'LOGIN_START' |}\ntype LoginSuccess = {| account: EdgeAccount, type: 'LOGIN_SUCCESS' |}\ntype LoginError = {| error: Error, type: 'LOGIN_ERROR' |}\n\ntype Action = LoginStart | LoginSuccess | LoginError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOGIN_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'LOGIN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLoginWithKey = (\n  context: ?EdgeContext,\n  username: ?string,\n  key: ?string,\n  options: ?EdgeAccountOptions\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const loginWithKey = () => {\n    if (!context || !username || !key) return\n    dispatch({ type: 'LOGIN_START' })\n    context\n      .loginWithKey(username, key, options || undefined)\n      .then((account: EdgeAccount) => dispatch({ type: 'LOGIN_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'LOGIN_ERROR', error }))\n  }\n\n  return { ...state, loginWithKey }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LoginStart = {| type: 'LOGIN_START' |}\ntype LoginSuccess = {| account: EdgeAccount, type: 'LOGIN_SUCCESS' |}\ntype LoginError = {| error: Error, type: 'LOGIN_ERROR' |}\n\ntype Action = LoginStart | LoginSuccess | LoginError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOGIN_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'LOGIN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLoginWithPassword = (\n  context: ?EdgeContext,\n  username: ?string,\n  password: ?string,\n  options: ?EdgeAccountOptions\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const loginWithPassword = () => {\n    if (!context || !username || !password) return\n    dispatch({ type: 'LOGIN_START' })\n    context\n      .loginWithPassword(username, password, options || undefined)\n      .then((account: EdgeAccount) => dispatch({ type: 'LOGIN_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'LOGIN_ERROR', error }))\n  }\n\n  return { ...state, loginWithPassword }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LoginStart = {| type: 'LOGIN_START' |}\ntype LoginSuccess = {| account: EdgeAccount, type: 'LOGIN_SUCCESS' |}\ntype LoginError = {| error: Error, type: 'LOGIN_ERROR' |}\n\ntype Action = LoginStart | LoginSuccess | LoginError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOGIN_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'LOGIN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLoginWithPin = (\n  context: ?EdgeContext,\n  username: ?string,\n  pin: ?string,\n  options: ?EdgeAccountOptions\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const loginWithPin = () => {\n    if (!context || !username || !pin) return\n    dispatch({ type: 'LOGIN_START' })\n    context\n      .loginWithPIN(username, pin, options || undefined)\n      .then((account: EdgeAccount) => dispatch({ type: 'LOGIN_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'LOGIN_ERROR', error }))\n  }\n\n  return { ...state, loginWithPin }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeAccountOptions, type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LoginStart = {| type: 'LOGIN_START' |}\ntype LoginSuccess = {| account: EdgeAccount, type: 'LOGIN_SUCCESS' |}\ntype LoginError = {| error: Error, type: 'LOGIN_ERROR' |}\n\ntype Action = LoginStart | LoginSuccess | LoginError\n\ntype State = {| account: EdgeAccount | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { account: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOGIN_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOGIN_SUCCESS': {\n      return { ...state, pending: false, account: action.account }\n    }\n    case 'LOGIN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLoginWithRecovery2 = (\n  context: ?EdgeContext,\n  recovery2Key: ?string,\n  username: ?string,\n  answers: ?Array<string>,\n  options: ?EdgeAccountOptions\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const loginWithRecovery2 = () => {\n    if (!context || !recovery2Key || !username || !answers) return\n    dispatch({ type: 'LOGIN_START' })\n    context\n      .loginWithRecovery2(recovery2Key, username, answers, options || undefined)\n      .then((account: EdgeAccount) => dispatch({ type: 'LOGIN_SUCCESS', account }))\n      .catch((error: Error) => dispatch({ type: 'LOGIN_ERROR', error }))\n  }\n\n  return { ...state, loginWithRecovery2 }\n}\n","// @flow\n\nimport { type EdgeAccount } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype LogoutStart = {| type: 'LOGOUT_START' |}\ntype LogoutSuccess = {| type: 'LOGOUT_SUCCESS' |}\ntype LogoutError = {| error: Error, type: 'LOGOUT_ERROR' |}\n\ntype Action = LogoutStart | LogoutSuccess | LogoutError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'LOGOUT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'LOGOUT_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'LOGOUT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useLogout = (account: ?EdgeAccount) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const logout = () => {\n    if (!account || !account.loggedIn) return\n    dispatch({ type: 'LOGOUT_START' })\n    account\n      .logout()\n      .then(() => dispatch({ type: 'LOGOUT_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'LOGOUT_ERROR', error }))\n  }\n\n  return { ...state, logout }\n}\n","// @flow\n\nimport { type EdgeContext, type EdgeContextOptions, makeEdgeContext } from 'edge-core-js'\nimport { useEffect, useState } from 'react'\n\nexport const useMakeEdgeContext = (contextOptions: EdgeContextOptions) => {\n  const [state, setState] = useState({ context: null, pending: false, error: null })\n\n  const effect = () => {\n    setState(state => ({ ...state, error: null, pending: true }))\n    makeEdgeContext(contextOptions)\n      .then((context: EdgeContext) => setState(state => ({ ...state, pending: false, context })))\n      .catch((error: Error) => setState(state => ({ ...state, pending: false, error })))\n  }\n\n  useEffect(effect, [])\n\n  return state\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeSpendInfo, type EdgeTransaction } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype MakeSpendStart = {| type: 'MAKE_SPEND_START' |}\ntype MakeSpendSuccess = {| transaction: EdgeTransaction, type: 'MAKE_SPEND_SUCCESS' |}\ntype MakeSpendError = {| error: Error, type: 'MAKE_SPEND_ERROR' |}\ntype Action = MakeSpendStart | MakeSpendSuccess | MakeSpendError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'MAKE_SPEND_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'MAKE_SPEND_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'MAKE_SPEND_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useMakeSpend = (wallet: ?EdgeCurrencyWallet, spendInfo: ?EdgeSpendInfo) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const makeSpend = () => {\n    if (!wallet || !spendInfo) return\n    dispatch({ type: 'MAKE_SPEND_START' })\n    wallet\n      .makeSpend(spendInfo)\n      .then((transaction: EdgeTransaction) => dispatch({ type: 'MAKE_SPEND_SUCCESS', transaction }))\n      .catch((error: Error) => dispatch({ type: 'MAKE_SPEND_ERROR', error }))\n  }\n\n  return { ...state, makeSpend }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeSpendInfo } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype GetMaxSpendableStart = {| type: 'GET_MAX_SPENDABLE_START' |}\ntype GetMaxSpendableSuccess = {| maxSpendable: string, type: 'GET_MAX_SPENDABLE_SUCCESS' |}\ntype GetMaxSpendableError = {| error: Error, type: 'GET_MAX_SPENDABLE_ERROR' |}\n\ntype Action = GetMaxSpendableStart | GetMaxSpendableSuccess | GetMaxSpendableError\n\ntype State = {| error: Error | null, maxSpendable: string | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, maxSpendable: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'GET_MAX_SPENDABLE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'GET_MAX_SPENDABLE_SUCCESS': {\n      return { ...state, pending: false, maxSpendable: action.maxSpendable }\n    }\n    case 'GET_MAX_SPENDABLE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useMaxSpendable = (wallet: ?EdgeCurrencyWallet, spendInfo: ?EdgeSpendInfo) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const getMaxSpendable = () => {\n    if (!wallet || !spendInfo) return // mount with null\n    dispatch({ type: 'GET_MAX_SPENDABLE_START' })\n    wallet\n      .getMaxSpendable(spendInfo)\n      .then((maxSpendable: string) => dispatch({ type: 'GET_MAX_SPENDABLE_SUCCESS', maxSpendable }))\n      .catch((error: Error) => dispatch({ type: 'GET_MAX_SPENDABLE_ERROR', error }))\n  }\n\n  return { ...state, getMaxSpendable }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeParsedUri } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ParseUriStart = {| type: 'PARSE_URI_START' |}\ntype ParseUriSuccess = {| type: 'PARSE_URI_SUCCESS', uri: EdgeParsedUri |}\ntype ParseUriError = {| error: Error, type: 'PARSE_URI_ERROR' |}\ntype Action = ParseUriStart | ParseUriSuccess | ParseUriError\n\ntype State = {| error: Error | null, pending: boolean, uri: EdgeParsedUri | null |}\n\nconst initialState: State = { pending: false, error: null, uri: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'PARSE_URI_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'PARSE_URI_SUCCESS': {\n      return { ...state, pending: false, uri: action.uri }\n    }\n    case 'PARSE_URI_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useParseUri = (wallet: ?EdgeCurrencyWallet, uri: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const parseUri = () => {\n    if (!wallet || !uri) return // mount with null\n    dispatch({ type: 'PARSE_URI_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .parseUri(uri)\n      .then((uri: EdgeParsedUri) => dispatch({ type: 'PARSE_URI_SUCCESS', uri }))\n      .catch((error: Error) => dispatch({ type: 'PARSE_URI_ERROR', error }))\n  }\n\n  return { ...state, parseUri }\n}\n","// @flow\n\nimport { type EdgeCurrencyCodeOptions, type EdgeCurrencyWallet, type EdgeReceiveAddress } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadReceiveAddressStart = {| type: 'READ_RECEIVE_ADDRESS_START' |}\ntype ReadReceiveAddressSuccess = {| receiveAddress: EdgeReceiveAddress, type: 'READ_RECEIVE_ADDRESS_SUCCESS' |}\ntype ReadReceiveAddressError = {| error: Error, type: 'READ_RECEIVE_ADDRESS_ERROR' |}\n\ntype Action = ReadReceiveAddressStart | ReadReceiveAddressSuccess | ReadReceiveAddressError\n\ntype State = {| error: Error | null, pending: boolean, receiveAddress: EdgeReceiveAddress | null |}\n\nconst initialState: State = { pending: false, error: null, receiveAddress: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_RECEIVE_ADDRESS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_RECEIVE_ADDRESS_SUCCESS': {\n      return { ...state, pending: false, receiveAddress: action.receiveAddress }\n    }\n    case 'READ_RECEIVE_ADDRESS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useReceiveAddress = (wallet: ?EdgeCurrencyWallet, options: ?EdgeCurrencyCodeOptions) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_RECEIVE_ADDRESS_START' })\n    wallet\n      .getReceiveAddress(options || undefined)\n      .then((receiveAddress: EdgeReceiveAddress) => dispatch({ type: 'READ_RECEIVE_ADDRESS_SUCCESS', receiveAddress }))\n      .catch((error: Error) => dispatch({ type: 'READ_RECEIVE_ADDRESS_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_RECEIVE_ADDRESS_START' })\n      wallet\n        .getReceiveAddress(options || undefined)\n        .then((receiveAddress: EdgeReceiveAddress) =>\n          dispatch({ type: 'READ_RECEIVE_ADDRESS_SUCCESS', receiveAddress })\n        )\n        .catch((error: Error) => dispatch({ type: 'READ_RECEIVE_ADDRESS_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, [wallet])\n\n  return state\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype RenameStart = {| type: 'RENAME_START' |}\ntype RenameSuccess = {| type: 'RENAME_SUCCESS' |}\ntype RenameError = {| error: Error, type: 'RENAME_ERROR' |}\ntype Action = RenameStart | RenameSuccess | RenameError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'RENAME_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'RENAME_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'RENAME_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useRename = (wallet: ?EdgeCurrencyWallet, name: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const rename = () => {\n    if (!wallet || !name) return\n    dispatch({ type: 'RENAME_START' })\n    wallet\n      .renameWallet(name)\n      .then(() => dispatch({ type: 'RENAME_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'RENAME_ERROR', error }))\n  }\n\n  return { ...state, rename }\n}\n","// @flow\n\nimport { type EdgeContext, type EdgeEdgeLoginOptions, type EdgePendingEdgeLogin } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype RequestEdgeLoginStart = {| type: 'REQUEST_EDGE_LOGIN_START' |}\ntype RequestEdgeLoginSuccess = {| pendingLogin: EdgePendingEdgeLogin, type: 'REQUEST_EDGE_LOGIN_SUCCESS' |}\ntype RequestEdgeLoginError = {| error: Error, type: 'REQUEST_EDGE_LOGIN_ERROR' |}\n\ntype Action = RequestEdgeLoginStart | RequestEdgeLoginSuccess | RequestEdgeLoginError\n\ntype State = {| error: Error | null, pending: boolean, pendingLogin: EdgePendingEdgeLogin | null |}\n\nconst initialState: State = { pending: false, error: null, pendingLogin: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'REQUEST_EDGE_LOGIN_START': {\n      return { ...state, pending: true, error: null, pendingLogin: null }\n    }\n    case 'REQUEST_EDGE_LOGIN_SUCCESS': {\n      return { ...state, pending: false, pendingLogin: action.pendingLogin }\n    }\n    case 'REQUEST_EDGE_LOGIN_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useRequestEdgeLogin = (context: ?EdgeContext, options: ?EdgeEdgeLoginOptions) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const requestEdgeLogin = () => {\n    if (!context || !options) return\n    dispatch({ type: 'REQUEST_EDGE_LOGIN_START' })\n    context\n      .requestEdgeLogin(options)\n      .then((pendingLogin: EdgePendingEdgeLogin) => dispatch({ type: 'REQUEST_EDGE_LOGIN_SUCCESS', pendingLogin }))\n      .catch((error: Error) => dispatch({ type: 'REQUEST_EDGE_LOGIN_ERROR', error }))\n  }\n\n  return { ...state, requestEdgeLogin }\n}\n","// @flow\n\nimport { type EdgeContext } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype RequestOtpResetStart = {| type: 'REQUEST_OTP_RESET_START' |}\ntype RequestOtpResetSuccess = {| type: 'REQUEST_OTP_RESET_SUCCESS' |}\ntype RequestOtpResetError = {| error: Error, type: 'REQUEST_OTP_RESET_ERROR' |}\n\ntype Action = RequestOtpResetStart | RequestOtpResetSuccess | RequestOtpResetError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'REQUEST_OTP_RESET_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'REQUEST_OTP_RESET_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'REQUEST_OTP_RESET_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useRequestOtpReset = (context: ?EdgeContext, username: ?string, otpResetToken: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const requestOtpReset = () => {\n    if (!context || !username || !otpResetToken) return\n    dispatch({ type: 'REQUEST_OTP_RESET_START' })\n    context\n      .requestOtpReset(username, otpResetToken)\n      .then((resetDate: Date) => dispatch({ type: 'REQUEST_OTP_RESET_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'REQUEST_OTP_RESET_ERROR', error }))\n  }\n\n  return { ...state, requestOtpReset }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ResyncStart = {| type: 'RESYNC_START' |}\ntype ResyncSuccess = {| type: 'RESYNC_SUCCESS' |}\ntype ResyncError = {| error: Error, type: 'RESYNC_ERROR' |}\ntype Action = ResyncStart | ResyncSuccess | ResyncError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'RESYNC_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'RESYNC_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'RESYNC_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useResyncBlockchain = (wallet: ?EdgeCurrencyWallet) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const resyncBlockchain = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'RESYNC_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .resyncBlockchain()\n      .then(() => dispatch({ type: 'RESYNC_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'RESYNC_ERROR', error }))\n  }\n\n  return { ...state, resyncBlockchain }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeReceiveAddress } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SaveReceiveAddressStart = {| type: 'SAVE_RECEIVE_ADDRESS_START' |}\ntype SaveReceiveAddressSuccess = {| type: 'SAVE_RECEIVE_ADDRESS_SUCCESS' |}\ntype SaveReceiveAddressError = {| error: Error, type: 'SAVE_RECEIVE_ADDRESS_ERROR' |}\ntype Action = SaveReceiveAddressStart | SaveReceiveAddressSuccess | SaveReceiveAddressError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SAVE_RECEIVE_ADDRESS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SAVE_RECEIVE_ADDRESS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SAVE_RECEIVE_ADDRESS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSaveReceiveAddress = (wallet: ?EdgeCurrencyWallet, receiveAddress: ?EdgeReceiveAddress) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const saveReceiveAddress = () => {\n    if (!wallet || !receiveAddress) return // mount with null\n    dispatch({ type: 'SAVE_RECEIVE_ADDRESS_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .saveReceiveAddress(receiveAddress)\n      .then(() => dispatch({ type: 'SAVE_RECEIVE_ADDRESS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SAVE_RECEIVE_ADDRESS_ERROR', error }))\n  }\n\n  return { ...state, saveReceiveAddress }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTransaction } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SaveTransactionStart = {| type: 'SAVE_TRANSACTION_START' |}\ntype SaveTransactionSuccess = {| type: 'SAVE_TRANSACTION_SUCCESS' |}\ntype SaveTransactionError = {| error: Error, type: 'SAVE_TRANSACTION_ERROR' |}\ntype Action = SaveTransactionStart | SaveTransactionSuccess | SaveTransactionError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SAVE_TRANSACTION_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SAVE_TRANSACTION_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SAVE_TRANSACTION_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSaveTransaction = (wallet: ?EdgeCurrencyWallet, transaction: ?EdgeTransaction) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const saveTransaction = () => {\n    if (!wallet || !transaction) return // mount with null\n    dispatch({ type: 'SAVE_TRANSACTION_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .saveTx(transaction)\n      .then(() => dispatch({ type: 'SAVE_TRANSACTION_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SAVE_TRANSACTION_ERROR', error }))\n  }\n\n  return { ...state, saveTransaction }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeMetadata } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SaveTransactionMetadataStart = {| type: 'SAVE_TRANSACTION_METADATA_START' |}\ntype SaveTransactionMetadataSuccess = {| type: 'SAVE_TRANSACTION_METADATA_SUCCESS' |}\ntype SaveTransactionMetadataError = {| error: Error, type: 'SAVE_TRANSACTION_METADATA_ERROR' |}\ntype Action = SaveTransactionMetadataStart | SaveTransactionMetadataSuccess | SaveTransactionMetadataError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SAVE_TRANSACTION_METADATA_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SAVE_TRANSACTION_METADATA_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SAVE_TRANSACTION_METADATA_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSaveTransactionMetadata = (\n  wallet: ?EdgeCurrencyWallet,\n  txid: ?string,\n  currencyCode: ?string,\n  metadata: ?EdgeMetadata\n) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const saveTransactionMetadata = () => {\n    if (!wallet || !txid || !currencyCode || !metadata) return\n    dispatch({ type: 'SAVE_TRANSACTION_METADATA_START' })\n    wallet\n      .saveTxMetadata(txid, currencyCode, metadata)\n      .then(() => dispatch({ type: 'SAVE_TRANSACTION_METADATA_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SAVE_TRANSACTION_METADATA_ERROR', error }))\n  }\n\n  return { ...state, saveTransactionMetadata }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype WriteFiatCurrencyCodeStart = {| type: 'WRITE_FIAT_CURRENCY_CODE_START' |}\ntype WriteFiatCurrencyCodeSuccess = {| type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS' |}\ntype WriteFiatCurrencyCodeError = {| error: Error, type: 'WRITE_FIAT_CURRENCY_CODE_ERROR' |}\ntype Action = WriteFiatCurrencyCodeStart | WriteFiatCurrencyCodeSuccess | WriteFiatCurrencyCodeError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_FIAT_CURRENCY_CODE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_FIAT_CURRENCY_CODE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_FIAT_CURRENCY_CODE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSetFiatCurrencyCode = (wallet: ?EdgeCurrencyWallet, fiatCurrencyCode: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setFiatCurrencyCode = () => {\n    if (!wallet || !fiatCurrencyCode) return\n    dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_START' })\n    wallet\n      .setFiatCurrencyCode(fiatCurrencyCode)\n      .then(() => dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_FIAT_CURRENCY_CODE_ERROR', error }))\n  }\n\n  return { ...state, setFiatCurrencyCode }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTransaction } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SBSTransactionStart = {| type: 'SBS_TRANSACTION_START' |}\ntype SBSTransactionSuccess = {| type: 'SBS_TRANSACTION_SUCCESS' |}\ntype SBSTransactionError = {| error: Error, type: 'SBS_TRANSACTION_ERROR' |}\ntype Action = SBSTransactionStart | SBSTransactionSuccess | SBSTransactionError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SBS_TRANSACTION_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SBS_TRANSACTION_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SBS_TRANSACTION_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSignBroadcastAndSaveTransaction = (wallet: ?EdgeCurrencyWallet, transaction: ?EdgeTransaction) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const signBroadcastAndSaveTransaction = () => {\n    if (!wallet || !transaction) return\n    dispatch({ type: 'SBS_TRANSACTION_START' })\n    Promise.resolve(transaction)\n      .then(signTx(wallet))\n      .then(broadcastTx(wallet))\n      .then(saveTx(wallet))\n      .then(() => dispatch({ type: 'SBS_TRANSACTION_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SBS_TRANSACTION_ERROR', error }))\n  }\n\n  return { ...state, signBroadcastAndSaveTransaction }\n}\n\nconst signTx = (wallet: EdgeCurrencyWallet) => (transaction: EdgeTransaction) => {\n  return wallet.signTx(transaction).then(() => transaction)\n}\nconst broadcastTx = (wallet: EdgeCurrencyWallet) => (transaction: EdgeTransaction) => {\n  return wallet.broadcastTx(transaction).then(() => transaction)\n}\nconst saveTx = (wallet: EdgeCurrencyWallet) => (transaction: EdgeTransaction) => {\n  return wallet.saveTx(transaction).then(() => transaction)\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeTransaction } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SignTransactionStart = {| type: 'SIGN_TRANSACTION_START' |}\ntype SignTransactionSuccess = {| type: 'SIGN_TRANSACTION_SUCCESS' |}\ntype SignTransactionError = {| error: Error, type: 'SIGN_TRANSACTION_ERROR' |}\ntype Action = SignTransactionStart | SignTransactionSuccess | SignTransactionError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SIGN_TRANSACTION_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SIGN_TRANSACTION_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SIGN_TRANSACTION_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSignTransaction = (wallet: ?EdgeCurrencyWallet, transaction: ?EdgeTransaction) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const signTransaction = () => {\n    if (!wallet || !transaction) return // mount with null\n    dispatch({ type: 'SIGN_TRANSACTION_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .signTx(transaction)\n      .then(() => dispatch({ type: 'SIGN_TRANSACTION_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SIGN_TRANSACTION_ERROR', error }))\n  }\n\n  return { ...state, signTransaction }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype StartEngineStart = {| type: 'START_ENGINE_START' |}\ntype StartEngineSuccess = {| type: 'START_ENGINE_SUCCESS' |}\ntype StartEngineError = {| error: Error, type: 'START_ENGINE_ERROR' |}\ntype Action = StartEngineStart | StartEngineSuccess | StartEngineError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'START_ENGINE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'START_ENGINE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'START_ENGINE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useStartEngine = (wallet: ?EdgeCurrencyWallet) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const startEngine = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'START_ENGINE_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .startEngine()\n      .then(() => dispatch({ type: 'START_ENGINE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'START_ENGINE_ERROR', error }))\n  }\n\n  return { ...state, startEngine }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype StopEngineStart = {| type: 'STOP_ENGINE_START' |}\ntype StopEngineSuccess = {| type: 'STOP_ENGINE_SUCCESS' |}\ntype StopEngineError = {| error: Error, type: 'STOP_ENGINE_ERROR' |}\ntype Action = StopEngineStart | StopEngineSuccess | StopEngineError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'STOP_ENGINE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'STOP_ENGINE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'STOP_ENGINE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useStopEngine = (wallet: ?EdgeCurrencyWallet) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const stopEngine = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'STOP_ENGINE_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .stopEngine()\n      .then(() => dispatch({ type: 'STOP_ENGINE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'STOP_ENGINE_ERROR', error }))\n  }\n\n  return { ...state, stopEngine }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeSpendInfo } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SweepPrivateKeysStart = {| type: 'SWEEP_PRIVATE_KEYS_START' |}\ntype SweepPrivateKeysSuccess = {| type: 'SWEEP_PRIVATE_KEYS_SUCCESS' |}\ntype SweepPrivateKeysError = {| error: Error, type: 'SWEEP_PRIVATE_KEYS_ERROR' |}\ntype Action = SweepPrivateKeysStart | SweepPrivateKeysSuccess | SweepPrivateKeysError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SWEEP_PRIVATE_KEYS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SWEEP_PRIVATE_KEYS_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SWEEP_PRIVATE_KEYS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useSweepPrivateKeys = (wallet: ?EdgeCurrencyWallet, spendInfo: ?EdgeSpendInfo) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const sweepPrivateKeys = () => {\n    if (!wallet || !spendInfo) return // mount with null\n    dispatch({ type: 'SWEEP_PRIVATE_KEYS_START' }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    wallet\n      .sweepPrivateKeys(spendInfo)\n      .then(() => dispatch({ type: 'SWEEP_PRIVATE_KEYS_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SWEEP_PRIVATE_KEYS_ERROR', error }))\n  }\n\n  return { ...state, sweepPrivateKeys }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype SyncStart = {| type: 'SYNC_START' |}\ntype SyncSuccess = {| type: 'SYNC_SUCCESS' |}\ntype SyncError = {| error: Error, type: 'SYNC_ERROR' |}\ntype Action = SyncStart | SyncSuccess | SyncError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'SYNC_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'SYNC_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'SYNC_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\ntype StorageContext = EdgeAccount | EdgeCurrencyWallet\nexport const useSync = (storageContext: ?StorageContext) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const sync = () => {\n    if (!storageContext) return // mount with null\n    dispatch({ type: 'SYNC_START' }) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB (2)\n    storageContext\n      .sync()\n      .then(() => dispatch({ type: 'SYNC_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'SYNC_ERROR', error }))\n  }\n\n  return { ...state, sync }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype ReadStart = {| type: 'READ_START' |}\ntype ReadSuccess = {| data: Stringifyable, type: 'READ_SUCCESS' |}\ntype ReadError = {| error: Error, type: 'READ_ERROR' |}\ntype Action = ReadStart | ReadSuccess | ReadError\n\ntype State = {| data: Stringifyable | null, error: Error | null, pending: boolean |}\n\nconst initialState: State = { data: null, error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_SUCCESS': {\n      return { ...state, pending: false, data: action.data }\n    }\n    case 'READ_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\ntype StorageContext = EdgeAccount | EdgeCurrencyWallet\nexport const useSyncedStorageRead = (storageContext: ?StorageContext, path: ?string, initial: ?Stringifyable) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!storageContext || !path) return // mount with null\n    dispatch({ type: 'READ_START' })\n    storageContext.disklet\n      .getText(path)\n      .catch((error: Error) => {\n        if (initial === undefined) throw error\n        const hack: any = storageContext\n        return hack.disklet.setText(path, JSON.stringify(initial)).then(() => hack.disklet.getText(path))\n      })\n      .then((data: string) => dispatch({ type: 'READ_SUCCESS', data: JSON.parse(data) }))\n      .catch((error: Error) => dispatch({ type: 'READ_ERROR', error })) // mount with storageContext / null -> storageContext / storageContextA -> storageContextB\n  }\n\n  useEffect(effect, [storageContext])\n\n  return { ...state, refresh: effect }\n}\n","// @flow\n\nimport { type EdgeAccount, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useReducer } from 'react'\n\nexport type Stringifyable = string | number | { [string]: Stringifyable } | Array<Stringifyable>\n\ntype WriteStart = {| type: 'WRITE_START' |}\ntype WriteSuccess = {| type: 'WRITE_SUCCESS' |}\ntype WriteError = {| error: Error, type: 'WRITE_ERROR' |}\ntype Action = WriteStart | WriteSuccess | WriteError\n\ntype State = {| error: Error | null, pending: boolean |}\n\nconst initialState: State = { error: null, pending: false }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'WRITE_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'WRITE_SUCCESS': {\n      return { ...state, pending: false }\n    }\n    case 'WRITE_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\ntype StorageContext = EdgeAccount | EdgeCurrencyWallet\nexport const useSyncedStorageWrite = (storageContext: ?StorageContext, path: ?string, data: Stringifyable) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const setData = () => {\n    if (!storageContext || !path || !data) return\n    dispatch({ type: 'WRITE_START' })\n    storageContext.disklet\n      .setText(path, JSON.stringify(data))\n      .then(() => dispatch({ type: 'WRITE_SUCCESS' }))\n      .catch((error: Error) => dispatch({ type: 'WRITE_ERROR', error }))\n  }\n\n  return { ...state, setData }\n}\n","// @flow\n\nimport { type EdgeCurrencyCodeOptions, type EdgeCurrencyWallet } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype ReadTransactionCountStart = {| type: 'READ_TRANSACTION_COUNT_START' |}\ntype ReadTransactionCountSuccess = {| transactionCount: number, type: 'READ_TRANSACTION_COUNT_SUCCESS' |}\ntype ReadTransactionCountError = {| error: Error, type: 'READ_TRANSACTION_COUNT_ERROR' |}\ntype Action = ReadTransactionCountStart | ReadTransactionCountSuccess | ReadTransactionCountError\n\ntype State = {| error: Error | null, pending: boolean, transactionCount: number | null |}\n\nconst initialState: State = { pending: false, error: null, transactionCount: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_TRANSACTION_COUNT_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_TRANSACTION_COUNT_SUCCESS': {\n      return { ...state, pending: false, transactionCount: action.transactionCount }\n    }\n    case 'READ_TRANSACTION_COUNT_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useTransactionCount = (wallet: ?EdgeCurrencyWallet, options: ?EdgeCurrencyCodeOptions = {}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_TRANSACTION_COUNT_START' })\n    wallet\n      .getNumTransactions(options || undefined)\n      .then((transactionCount: number) => dispatch({ type: 'READ_TRANSACTION_COUNT_SUCCESS', transactionCount }))\n      .catch((error: Error) => dispatch({ type: 'READ_TRANSACTION_COUNT_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_TRANSACTION_COUNT_START' })\n      wallet\n        .getNumTransactions(options || undefined)\n        .then((transactionCount: number) => dispatch({ type: 'READ_TRANSACTION_COUNT_SUCCESS', transactionCount }))\n        .catch((error: Error) => dispatch({ type: 'READ_TRANSACTION_COUNT_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, [wallet])\n\n  return { ...state }\n}\n","// @flow\n\nimport { type EdgeCurrencyWallet, type EdgeGetTransactionsOptions, type EdgeTransaction } from 'edge-core-js'\nimport { useEffect, useReducer } from 'react'\n\ntype Transactions = Array<EdgeTransaction>\n\ntype ReadTransactionsStart = {| type: 'READ_TRANSACTIONS_START' |}\ntype ReadTransactionsSuccess = {| transactions: Transactions, type: 'READ_TRANSACTIONS_SUCCESS' |}\ntype ReadTransactionsError = {| error: Error, type: 'READ_TRANSACTIONS_ERROR' |}\ntype Action = ReadTransactionsStart | ReadTransactionsSuccess | ReadTransactionsError\n\ntype State = {| error: Error | null, pending: boolean, transactions: Transactions | null |}\n\nconst initialState: State = { pending: false, error: null, transactions: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'READ_TRANSACTIONS_START': {\n      return { ...state, pending: true, error: null }\n    }\n    case 'READ_TRANSACTIONS_SUCCESS': {\n      return { ...state, pending: false, transactions: action.transactions }\n    }\n    case 'READ_TRANSACTIONS_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useTransactions = (wallet: ?EdgeCurrencyWallet, options: ?EdgeGetTransactionsOptions = {}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const effect = () => {\n    if (!wallet) return // mount with null\n    dispatch({ type: 'READ_TRANSACTIONS_START' })\n    wallet\n      .getTransactions(options || undefined)\n      .then((transactions: Transactions) => dispatch({ type: 'READ_TRANSACTIONS_SUCCESS', transactions }))\n      .catch((error: Error) => dispatch({ type: 'READ_TRANSACTIONS_ERROR', error }))\n\n    const unsubscribe = wallet.on('newTransactions', () => {\n      if (!wallet) return\n      dispatch({ type: 'READ_TRANSACTIONS_START' })\n      wallet\n        .getTransactions(options || undefined)\n        .then((transactions: Transactions) => dispatch({ type: 'READ_TRANSACTIONS_SUCCESS', transactions }))\n        .catch((error: Error) => dispatch({ type: 'READ_TRANSACTIONS_ERROR', error }))\n    }) // mount with wallet / null -> wallet / walletA -> walletB (2)\n    return unsubscribe // unmount with wallet / walletA -> walletB (1) / wallet -> null\n  }\n\n  useEffect(effect, [wallet])\n\n  return { ...state }\n}\n","// @flow\n\nimport { type EdgeContext, type EdgePasswordRules } from 'edge-core-js'\nimport { useReducer } from 'react'\n\ntype ValidatePasswordStart = {| type: 'VALIDATE_PASSWORD_START' |}\ntype ValidatePasswordSuccess = {| passwordStatus: EdgePasswordRules, type: 'VALIDATE_PASSWORD_SUCCESS' |}\ntype ValidatePasswordError = {| error: Error, type: 'VALIDATE_PASSWORD_ERROR' |}\n\ntype Action = ValidatePasswordStart | ValidatePasswordSuccess | ValidatePasswordError\n\ntype State = {| error: Error | null, passwordStatus: EdgePasswordRules | null, pending: boolean |}\n\nconst initialState: State = { pending: false, error: null, passwordStatus: null }\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'VALIDATE_PASSWORD_START': {\n      return { ...state, pending: true, error: null, passwordStatus: null }\n    }\n    case 'VALIDATE_PASSWORD_SUCCESS': {\n      return { ...state, pending: false, passwordStatus: action.passwordStatus }\n    }\n    case 'VALIDATE_PASSWORD_ERROR': {\n      return { ...state, pending: false, error: action.error }\n    }\n    default:\n      return state\n  }\n}\n\nexport const useValidatePassword = (context: ?EdgeContext, password: ?string) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const validatePassword = () => {\n    if (!context || !password) return\n    dispatch({ type: 'VALIDATE_PASSWORD_START' })\n    Promise.resolve(context.checkPasswordRules(password))\n      .then((passwordStatus: EdgePasswordRules) => dispatch({ type: 'VALIDATE_PASSWORD_SUCCESS', passwordStatus }))\n      .catch((error: Error) => dispatch({ type: 'VALIDATE_PASSWORD_ERROR', error }))\n  }\n\n  return { ...state, validatePassword }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;kBAakB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;yCAkBqC;;;;;;;;;;;;;;;;;;;;kBClBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNsD;;;;;kBAKtD;;;;;;;;;;;;;;;;;;8CAkByC;;;;;;;;;;;;;;;;;;;;kBCjBzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;8BAEmB;;;;;;;;;;;;;;;;wCAgBiB;;;;;;;;;;;;;;;;;;;;kBClBpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN4D;;;;;kBAK5D;;;;;;;;;;;;;;;;;;;SAmBT;;;QAGD;;;;;;;;;;;;;;;;;2BAiBa;;;;;;;;;AC5CqD;;;;;kBAKxD;;;;;;;;;;;;;;;;;;;;;;;SAuBT;;;;;;;;;;;;;;;;;;;;;kBCtBS;;;;;;;;;;;;;;;;;;;;;SAqBT;;;;;;;;;;;;;;;;;;;;;kBCrBS;;;;;;;;;;;;;;;;;;8CAkByC;;;;;;;;;;;;;;ACxBc;;;;;kBAKvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNsD;;;;;kBAKtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCCA;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCFnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BCNkC,YAAY;;;;;;;;;;;;;;;;+BCAZ,YAAY;;;;;;;;;;;;;;;;;QCCxD;YACI;;;;;;;;;;;;;;;;;;;;;;;;;kBCIM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNgD;;;;;kBAKhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLyC;;;;;kBAKzC;;;;;;;;;;;;;;;;;;qCAkBwC;;;;;;;;;;;;;;ACvBC;;;;;kBAKzC;;;;;;;;;;;;;;;;;;qCAkBwC;;;;;;;;;;;;;;;;;;;;kBCjBxC;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCFnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJhB;;AAEqG;;;kBAGrF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLgD;;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAiC/B;;;;;;;;;;;AClCuC;;AAEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJiC;;;;;kBAKnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCCA;;;;;;;;;;;;;;;;;;;SAmBT;;;SAGA;;;;;;;;;;;;;;;;;;;;;kBCtBS;;;;;;;;;;;;;;;;;;;SAmBT;;;SAGA;;;;;;;;;;;;;;;;;;;;;kBCtBS;;;;;;;;;;;;;;;;;;;SAmBT;;;SAGA;;;;;;;;;;;;;;;;;;;;;kBCtBS;;;;;;;;;;;;;;;;;;;;cAoBJ;;;SAGL;;;;;;;;;;;;;;;;;;;;;kBCvBS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CCR+B;;;;;;oBAM7B;mBACD;;;;;;;;;;;;ACL+C;;;;;kBAKhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCCA;;;;;;;;;;;;;;;;;;kDAkBoD;;;;;;;;;;;;;;ACxBN;;;;;kBAK9C;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCDnB;;;;;;;;;;;;;;;;;;iDAkBoD;;;;;;;;;;;;;;;;;;;2BAmBjD;;;;;;;;;AC3CsC;;;;;kBAKzC;;;;;;;;;;;;;;;;;;uCAkByC;;;;;;;;;;;;;;;;;;;;kBCjBzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNyC;;;;;kBAKzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLmE;;;;;kBAKnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL4D;;;;;kBAK5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL6E;;;;;kBAK7E;;;;;;;;;;;;;;;;;;;QAmBV;;;;;;;;;;;;;;;;;;ACxBoF;;;;;kBAK1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL0D;;;;;kBAK1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL4D;;;;;kBAK5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLoD;;;;;kBAKpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLkD;;;;;kBAKlD;;8BAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP4C;;;;;kBAK/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLqC;;;;;kBAKrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJgD;;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAiC/B;;;;;;;;;;ACnC6B;;AAEK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHqC;;;;;kBAKvE;;;;;;;;;;;;;;;;;;mDAkBsD;;;;;;;;;;;;;;;;;2BAiBnD;;;;;;;;;;ACvC6E;;AAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAsC1D;;;;;;;;;;;;;;;kBCnCT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}